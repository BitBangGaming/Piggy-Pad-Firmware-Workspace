#ifndef COMMS_N64_CONSOLE_H_
#define COMMS_N64_CONSOLE_H_

#include <stdint.h>
#include "stm32f4xx_hal.h"
#include "io_mapping_stm32f411ce_blackpill_weactstudio_v3_0.h"

// Macros
#define UART_BYTE_2_N64_BITS_00_CASE1	0x08
#define UART_BYTE_2_N64_BITS_00_CASE2	0x88
#define UART_BYTE_2_N64_BITS_01_CASE1	0xE8
#define UART_BYTE_2_N64_BITS_01_CASE2	0xC8
#define UART_BYTE_2_N64_BITS_10_CASE1	0x0F
#define UART_BYTE_2_N64_BITS_10_CASE2	0x8F
#define UART_BYTE_2_N64_BITS_11_CASE1	0xEF
#define UART_BYTE_2_N64_BITS_11_CASE2	0xCF

// Module specific enums
typedef enum
{
	N64_NOPULL = 0,
	N64_PULLUP
} N64PullupState_t;

// Private Variables
static UART_HandleTypeDef huart1;

/* The controllerRepsonse array is what the uart received from the controller.
 * This array needs to be parsed properly to convert the uart bytes into n64 bytes
 * in order to make any sense of it.
 */
static uint8_t controllerResponse[16];

/* The controllerRegisters array is the result after parsing the controllerResponse
 * array.
 */
static uint8_t controllerRegisters[4];

// Initializer
void CommsN64Console_Init(void);

// Parsers
void CommsN64Console_ParseContollerInputs(void);

// Setters
void CommsN64Console_SetPullup(N64PullupState_t);
inline void CommsN64Console_SendStopBit(void);

// Getters
inline void CommsN64Console_GetContollerStatus(void);
inline void CommsN64Console_GetContollerInputs(void);

#endif
