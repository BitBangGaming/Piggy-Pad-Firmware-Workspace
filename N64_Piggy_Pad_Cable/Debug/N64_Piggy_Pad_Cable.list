
N64_Piggy_Pad_Cable.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014d4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  0800166c  0800166c  0001166c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001678  08001678  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001678  08001678  00011678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001680  08001680  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001680  08001680  00011680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001684  08001684  00011684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08001694  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08001694  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000052e8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f0a  00000000  00000000  00025324  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000598  00000000  00000000  00026230  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000538  00000000  00000000  000267c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000e0e  00000000  00000000  00026d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000509a  00000000  00000000  00027b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082936  00000000  00000000  0002cba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000af4de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001648  00000000  00000000  000af55c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001654 	.word	0x08001654

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08001654 	.word	0x08001654

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <HAL_Init+0x40>)
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e8:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0a      	ldr	r2, [pc, #40]	; (8000518 <HAL_Init+0x40>)
 80004ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a07      	ldr	r2, [pc, #28]	; (8000518 <HAL_Init+0x40>)
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 f937 	bl	8000774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000506:	200f      	movs	r0, #15
 8000508:	f000 f810 	bl	800052c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800050c:	f000 f806 	bl	800051c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023c00 	.word	0x40023c00

0800051c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
	...

0800052c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <HAL_InitTick+0x54>)
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_InitTick+0x58>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4619      	mov	r1, r3
 800053e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000542:	fbb3 f3f1 	udiv	r3, r3, r1
 8000546:	fbb2 f3f3 	udiv	r3, r2, r3
 800054a:	4618      	mov	r0, r3
 800054c:	f000 f939 	bl	80007c2 <HAL_SYSTICK_Config>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
 8000558:	e00e      	b.n	8000578 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2b0f      	cmp	r3, #15
 800055e:	d80a      	bhi.n	8000576 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000560:	2200      	movs	r2, #0
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	f04f 30ff 	mov.w	r0, #4294967295
 8000568:	f000 f90f 	bl	800078a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800056c:	4a06      	ldr	r2, [pc, #24]	; (8000588 <HAL_InitTick+0x5c>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000572:	2300      	movs	r3, #0
 8000574:	e000      	b.n	8000578 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000576:	2301      	movs	r3, #1
}
 8000578:	4618      	mov	r0, r3
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000008 	.word	0x20000008
 8000584:	20000004 	.word	0x20000004
 8000588:	20000000 	.word	0x20000000

0800058c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <HAL_IncTick+0x20>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	461a      	mov	r2, r3
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_IncTick+0x24>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4413      	add	r3, r2
 800059c:	4a04      	ldr	r2, [pc, #16]	; (80005b0 <HAL_IncTick+0x24>)
 800059e:	6013      	str	r3, [r2, #0]
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000070 	.word	0x20000070

080005b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  return uwTick;
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <HAL_GetTick+0x14>)
 80005ba:	681b      	ldr	r3, [r3, #0]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000070 	.word	0x20000070

080005cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005d4:	f7ff ffee 	bl	80005b4 <HAL_GetTick>
 80005d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005e4:	d005      	beq.n	80005f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <HAL_Delay+0x40>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	461a      	mov	r2, r3
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	4413      	add	r3, r2
 80005f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005f2:	bf00      	nop
 80005f4:	f7ff ffde 	bl	80005b4 <HAL_GetTick>
 80005f8:	4602      	mov	r2, r0
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	68fa      	ldr	r2, [r7, #12]
 8000600:	429a      	cmp	r2, r3
 8000602:	d8f7      	bhi.n	80005f4 <HAL_Delay+0x28>
  {
  }
}
 8000604:	bf00      	nop
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000004 	.word	0x20000004

08000610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f003 0307 	and.w	r3, r3, #7
 800061e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <__NVIC_SetPriorityGrouping+0x44>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000626:	68ba      	ldr	r2, [r7, #8]
 8000628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800062c:	4013      	ands	r3, r2
 800062e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800063c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000642:	4a04      	ldr	r2, [pc, #16]	; (8000654 <__NVIC_SetPriorityGrouping+0x44>)
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	60d3      	str	r3, [r2, #12]
}
 8000648:	bf00      	nop
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <__NVIC_GetPriorityGrouping+0x18>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	0a1b      	lsrs	r3, r3, #8
 8000662:	f003 0307 	and.w	r3, r3, #7
}
 8000666:	4618      	mov	r0, r3
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	6039      	str	r1, [r7, #0]
 800067e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000684:	2b00      	cmp	r3, #0
 8000686:	db0a      	blt.n	800069e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	b2da      	uxtb	r2, r3
 800068c:	490c      	ldr	r1, [pc, #48]	; (80006c0 <__NVIC_SetPriority+0x4c>)
 800068e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000692:	0112      	lsls	r2, r2, #4
 8000694:	b2d2      	uxtb	r2, r2
 8000696:	440b      	add	r3, r1
 8000698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800069c:	e00a      	b.n	80006b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	4908      	ldr	r1, [pc, #32]	; (80006c4 <__NVIC_SetPriority+0x50>)
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	f003 030f 	and.w	r3, r3, #15
 80006aa:	3b04      	subs	r3, #4
 80006ac:	0112      	lsls	r2, r2, #4
 80006ae:	b2d2      	uxtb	r2, r2
 80006b0:	440b      	add	r3, r1
 80006b2:	761a      	strb	r2, [r3, #24]
}
 80006b4:	bf00      	nop
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr
 80006c0:	e000e100 	.word	0xe000e100
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b089      	sub	sp, #36	; 0x24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	f003 0307 	and.w	r3, r3, #7
 80006da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006dc:	69fb      	ldr	r3, [r7, #28]
 80006de:	f1c3 0307 	rsb	r3, r3, #7
 80006e2:	2b04      	cmp	r3, #4
 80006e4:	bf28      	it	cs
 80006e6:	2304      	movcs	r3, #4
 80006e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	3304      	adds	r3, #4
 80006ee:	2b06      	cmp	r3, #6
 80006f0:	d902      	bls.n	80006f8 <NVIC_EncodePriority+0x30>
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	3b03      	subs	r3, #3
 80006f6:	e000      	b.n	80006fa <NVIC_EncodePriority+0x32>
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000700:	69bb      	ldr	r3, [r7, #24]
 8000702:	fa02 f303 	lsl.w	r3, r2, r3
 8000706:	43da      	mvns	r2, r3
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	401a      	ands	r2, r3
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000710:	f04f 31ff 	mov.w	r1, #4294967295
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	fa01 f303 	lsl.w	r3, r1, r3
 800071a:	43d9      	mvns	r1, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000720:	4313      	orrs	r3, r2
         );
}
 8000722:	4618      	mov	r0, r3
 8000724:	3724      	adds	r7, #36	; 0x24
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
	...

08000730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3b01      	subs	r3, #1
 800073c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000740:	d301      	bcc.n	8000746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000742:	2301      	movs	r3, #1
 8000744:	e00f      	b.n	8000766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000746:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <SysTick_Config+0x40>)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	3b01      	subs	r3, #1
 800074c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800074e:	210f      	movs	r1, #15
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	f7ff ff8e 	bl	8000674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <SysTick_Config+0x40>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075e:	4b04      	ldr	r3, [pc, #16]	; (8000770 <SysTick_Config+0x40>)
 8000760:	2207      	movs	r2, #7
 8000762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000764:	2300      	movs	r3, #0
}
 8000766:	4618      	mov	r0, r3
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	e000e010 	.word	0xe000e010

08000774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f7ff ff47 	bl	8000610 <__NVIC_SetPriorityGrouping>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800078a:	b580      	push	{r7, lr}
 800078c:	b086      	sub	sp, #24
 800078e:	af00      	add	r7, sp, #0
 8000790:	4603      	mov	r3, r0
 8000792:	60b9      	str	r1, [r7, #8]
 8000794:	607a      	str	r2, [r7, #4]
 8000796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800079c:	f7ff ff5c 	bl	8000658 <__NVIC_GetPriorityGrouping>
 80007a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	68b9      	ldr	r1, [r7, #8]
 80007a6:	6978      	ldr	r0, [r7, #20]
 80007a8:	f7ff ff8e 	bl	80006c8 <NVIC_EncodePriority>
 80007ac:	4602      	mov	r2, r0
 80007ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007b2:	4611      	mov	r1, r2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ff5d 	bl	8000674 <__NVIC_SetPriority>
}
 80007ba:	bf00      	nop
 80007bc:	3718      	adds	r7, #24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff ffb0 	bl	8000730 <SysTick_Config>
 80007d0:	4603      	mov	r3, r0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007dc:	b480      	push	{r7}
 80007de:	b089      	sub	sp, #36	; 0x24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
 80007f6:	e159      	b.n	8000aac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007f8:	2201      	movs	r2, #1
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000800:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	697a      	ldr	r2, [r7, #20]
 8000808:	4013      	ands	r3, r2
 800080a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800080c:	693a      	ldr	r2, [r7, #16]
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	429a      	cmp	r2, r3
 8000812:	f040 8148 	bne.w	8000aa6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	f003 0303 	and.w	r3, r3, #3
 800081e:	2b01      	cmp	r3, #1
 8000820:	d005      	beq.n	800082e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800082a:	2b02      	cmp	r3, #2
 800082c:	d130      	bne.n	8000890 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	2203      	movs	r2, #3
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	43db      	mvns	r3, r3
 8000840:	69ba      	ldr	r2, [r7, #24]
 8000842:	4013      	ands	r3, r2
 8000844:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	68da      	ldr	r2, [r3, #12]
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	69ba      	ldr	r2, [r7, #24]
 8000854:	4313      	orrs	r3, r2
 8000856:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	69ba      	ldr	r2, [r7, #24]
 800085c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000864:	2201      	movs	r2, #1
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	43db      	mvns	r3, r3
 800086e:	69ba      	ldr	r2, [r7, #24]
 8000870:	4013      	ands	r3, r2
 8000872:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	091b      	lsrs	r3, r3, #4
 800087a:	f003 0201 	and.w	r2, r3, #1
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	4313      	orrs	r3, r2
 8000888:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	f003 0303 	and.w	r3, r3, #3
 8000898:	2b03      	cmp	r3, #3
 800089a:	d017      	beq.n	80008cc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	2203      	movs	r2, #3
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	43db      	mvns	r3, r3
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	4013      	ands	r3, r2
 80008b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	689a      	ldr	r2, [r3, #8]
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	69ba      	ldr	r2, [r7, #24]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	69ba      	ldr	r2, [r7, #24]
 80008ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	f003 0303 	and.w	r3, r3, #3
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	d123      	bne.n	8000920 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	08da      	lsrs	r2, r3, #3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3208      	adds	r2, #8
 80008e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	f003 0307 	and.w	r3, r3, #7
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	220f      	movs	r2, #15
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	43db      	mvns	r3, r3
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	4013      	ands	r3, r2
 80008fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	691a      	ldr	r2, [r3, #16]
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	4313      	orrs	r3, r2
 8000910:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	08da      	lsrs	r2, r3, #3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	3208      	adds	r2, #8
 800091a:	69b9      	ldr	r1, [r7, #24]
 800091c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	2203      	movs	r2, #3
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	43db      	mvns	r3, r3
 8000932:	69ba      	ldr	r2, [r7, #24]
 8000934:	4013      	ands	r3, r2
 8000936:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f003 0203 	and.w	r2, r3, #3
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	4313      	orrs	r3, r2
 800094c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095c:	2b00      	cmp	r3, #0
 800095e:	f000 80a2 	beq.w	8000aa6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	4b56      	ldr	r3, [pc, #344]	; (8000ac0 <HAL_GPIO_Init+0x2e4>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	4a55      	ldr	r2, [pc, #340]	; (8000ac0 <HAL_GPIO_Init+0x2e4>)
 800096c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000970:	6453      	str	r3, [r2, #68]	; 0x44
 8000972:	4b53      	ldr	r3, [pc, #332]	; (8000ac0 <HAL_GPIO_Init+0x2e4>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800097e:	4a51      	ldr	r2, [pc, #324]	; (8000ac4 <HAL_GPIO_Init+0x2e8>)
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	089b      	lsrs	r3, r3, #2
 8000984:	3302      	adds	r3, #2
 8000986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800098a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	f003 0303 	and.w	r3, r3, #3
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	220f      	movs	r2, #15
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43db      	mvns	r3, r3
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	4013      	ands	r3, r2
 80009a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a48      	ldr	r2, [pc, #288]	; (8000ac8 <HAL_GPIO_Init+0x2ec>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d019      	beq.n	80009de <HAL_GPIO_Init+0x202>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a47      	ldr	r2, [pc, #284]	; (8000acc <HAL_GPIO_Init+0x2f0>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d013      	beq.n	80009da <HAL_GPIO_Init+0x1fe>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a46      	ldr	r2, [pc, #280]	; (8000ad0 <HAL_GPIO_Init+0x2f4>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d00d      	beq.n	80009d6 <HAL_GPIO_Init+0x1fa>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a45      	ldr	r2, [pc, #276]	; (8000ad4 <HAL_GPIO_Init+0x2f8>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d007      	beq.n	80009d2 <HAL_GPIO_Init+0x1f6>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a44      	ldr	r2, [pc, #272]	; (8000ad8 <HAL_GPIO_Init+0x2fc>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d101      	bne.n	80009ce <HAL_GPIO_Init+0x1f2>
 80009ca:	2304      	movs	r3, #4
 80009cc:	e008      	b.n	80009e0 <HAL_GPIO_Init+0x204>
 80009ce:	2307      	movs	r3, #7
 80009d0:	e006      	b.n	80009e0 <HAL_GPIO_Init+0x204>
 80009d2:	2303      	movs	r3, #3
 80009d4:	e004      	b.n	80009e0 <HAL_GPIO_Init+0x204>
 80009d6:	2302      	movs	r3, #2
 80009d8:	e002      	b.n	80009e0 <HAL_GPIO_Init+0x204>
 80009da:	2301      	movs	r3, #1
 80009dc:	e000      	b.n	80009e0 <HAL_GPIO_Init+0x204>
 80009de:	2300      	movs	r3, #0
 80009e0:	69fa      	ldr	r2, [r7, #28]
 80009e2:	f002 0203 	and.w	r2, r2, #3
 80009e6:	0092      	lsls	r2, r2, #2
 80009e8:	4093      	lsls	r3, r2
 80009ea:	69ba      	ldr	r2, [r7, #24]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009f0:	4934      	ldr	r1, [pc, #208]	; (8000ac4 <HAL_GPIO_Init+0x2e8>)
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	089b      	lsrs	r3, r3, #2
 80009f6:	3302      	adds	r3, #2
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009fe:	4b37      	ldr	r3, [pc, #220]	; (8000adc <HAL_GPIO_Init+0x300>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	43db      	mvns	r3, r3
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d003      	beq.n	8000a22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a22:	4a2e      	ldr	r2, [pc, #184]	; (8000adc <HAL_GPIO_Init+0x300>)
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a28:	4b2c      	ldr	r3, [pc, #176]	; (8000adc <HAL_GPIO_Init+0x300>)
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	43db      	mvns	r3, r3
 8000a32:	69ba      	ldr	r2, [r7, #24]
 8000a34:	4013      	ands	r3, r2
 8000a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d003      	beq.n	8000a4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a4c:	4a23      	ldr	r2, [pc, #140]	; (8000adc <HAL_GPIO_Init+0x300>)
 8000a4e:	69bb      	ldr	r3, [r7, #24]
 8000a50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a52:	4b22      	ldr	r3, [pc, #136]	; (8000adc <HAL_GPIO_Init+0x300>)
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	69ba      	ldr	r2, [r7, #24]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d003      	beq.n	8000a76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a76:	4a19      	ldr	r2, [pc, #100]	; (8000adc <HAL_GPIO_Init+0x300>)
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <HAL_GPIO_Init+0x300>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	43db      	mvns	r3, r3
 8000a86:	69ba      	ldr	r2, [r7, #24]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d003      	beq.n	8000aa0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000aa0:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <HAL_GPIO_Init+0x300>)
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	61fb      	str	r3, [r7, #28]
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	2b0f      	cmp	r3, #15
 8000ab0:	f67f aea2 	bls.w	80007f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	3724      	adds	r7, #36	; 0x24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40013800 	.word	0x40013800
 8000ac8:	40020000 	.word	0x40020000
 8000acc:	40020400 	.word	0x40020400
 8000ad0:	40020800 	.word	0x40020800
 8000ad4:	40020c00 	.word	0x40020c00
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40013c00 	.word	0x40013c00

08000ae0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	807b      	strh	r3, [r7, #2]
 8000aec:	4613      	mov	r3, r2
 8000aee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000af0:	787b      	ldrb	r3, [r7, #1]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d003      	beq.n	8000afe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000af6:	887a      	ldrh	r2, [r7, #2]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000afc:	e003      	b.n	8000b06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000afe:	887b      	ldrh	r3, [r7, #2]
 8000b00:	041a      	lsls	r2, r3, #16
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	619a      	str	r2, [r3, #24]
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08c      	sub	sp, #48	; 0x30
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d129      	bne.n	8000b7a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	61bb      	str	r3, [r7, #24]
 8000b2a:	4b2b      	ldr	r3, [pc, #172]	; (8000bd8 <HAL_RCC_MCOConfig+0xc4>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a2a      	ldr	r2, [pc, #168]	; (8000bd8 <HAL_RCC_MCOConfig+0xc4>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <HAL_RCC_MCOConfig+0xc4>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	61bb      	str	r3, [r7, #24]
 8000b40:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8000b42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	481f      	ldr	r0, [pc, #124]	; (8000bdc <HAL_RCC_MCOConfig+0xc8>)
 8000b60:	f7ff fe3c 	bl	80007dc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8000b64:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <HAL_RCC_MCOConfig+0xc4>)
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8000b6c:	68b9      	ldr	r1, [r7, #8]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	430b      	orrs	r3, r1
 8000b72:	4919      	ldr	r1, [pc, #100]	; (8000bd8 <HAL_RCC_MCOConfig+0xc4>)
 8000b74:	4313      	orrs	r3, r2
 8000b76:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8000b78:	e029      	b.n	8000bce <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <HAL_RCC_MCOConfig+0xc4>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a15      	ldr	r2, [pc, #84]	; (8000bd8 <HAL_RCC_MCOConfig+0xc4>)
 8000b84:	f043 0304 	orr.w	r3, r3, #4
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <HAL_RCC_MCOConfig+0xc4>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8000b96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8000bac:	f107 031c 	add.w	r3, r7, #28
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480b      	ldr	r0, [pc, #44]	; (8000be0 <HAL_RCC_MCOConfig+0xcc>)
 8000bb4:	f7ff fe12 	bl	80007dc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <HAL_RCC_MCOConfig+0xc4>)
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	00d9      	lsls	r1, r3, #3
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	430b      	orrs	r3, r1
 8000bc8:	4903      	ldr	r1, [pc, #12]	; (8000bd8 <HAL_RCC_MCOConfig+0xc4>)
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	608b      	str	r3, [r1, #8]
}
 8000bce:	bf00      	nop
 8000bd0:	3730      	adds	r7, #48	; 0x30
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	40020800 	.word	0x40020800

08000be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8000bea:	681b      	ldr	r3, [r3, #0]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	20000008 	.word	0x20000008

08000bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000c00:	f7ff fff0 	bl	8000be4 <HAL_RCC_GetHCLKFreq>
 8000c04:	4601      	mov	r1, r0
 8000c06:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	0a9b      	lsrs	r3, r3, #10
 8000c0c:	f003 0307 	and.w	r3, r3, #7
 8000c10:	4a03      	ldr	r2, [pc, #12]	; (8000c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000c12:	5cd3      	ldrb	r3, [r2, r3]
 8000c14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	08001670 	.word	0x08001670

08000c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000c28:	f7ff ffdc 	bl	8000be4 <HAL_RCC_GetHCLKFreq>
 8000c2c:	4601      	mov	r1, r0
 8000c2e:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	0b5b      	lsrs	r3, r3, #13
 8000c34:	f003 0307 	and.w	r3, r3, #7
 8000c38:	4a03      	ldr	r2, [pc, #12]	; (8000c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000c3a:	5cd3      	ldrb	r3, [r2, r3]
 8000c3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40023800 	.word	0x40023800
 8000c48:	08001670 	.word	0x08001670

08000c4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d101      	bne.n	8000c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e03f      	b.n	8000cde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d106      	bne.n	8000c78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f000 f837 	bl	8000ce6 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2224      	movs	r2, #36	; 0x24
 8000c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	68da      	ldr	r2, [r3, #12]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000c8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f000 f90f 	bl	8000eb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	691a      	ldr	r2, [r3, #16]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000ca4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	695a      	ldr	r2, [r3, #20]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000cb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	68da      	ldr	r2, [r3, #12]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000cc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2220      	movs	r2, #32
 8000cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2220      	movs	r2, #32
 8000cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b08a      	sub	sp, #40	; 0x28
 8000cfe:	af02      	add	r7, sp, #8
 8000d00:	60f8      	str	r0, [r7, #12]
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	603b      	str	r3, [r7, #0]
 8000d06:	4613      	mov	r3, r2
 8000d08:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b20      	cmp	r3, #32
 8000d18:	d17c      	bne.n	8000e14 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d002      	beq.n	8000d26 <HAL_UART_Transmit+0x2c>
 8000d20:	88fb      	ldrh	r3, [r7, #6]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d101      	bne.n	8000d2a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e075      	b.n	8000e16 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d101      	bne.n	8000d38 <HAL_UART_Transmit+0x3e>
 8000d34:	2302      	movs	r3, #2
 8000d36:	e06e      	b.n	8000e16 <HAL_UART_Transmit+0x11c>
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	2200      	movs	r2, #0
 8000d44:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	2221      	movs	r2, #33	; 0x21
 8000d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000d4e:	f7ff fc31 	bl	80005b4 <HAL_GetTick>
 8000d52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	88fa      	ldrh	r2, [r7, #6]
 8000d58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	88fa      	ldrh	r2, [r7, #6]
 8000d5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d68:	d108      	bne.n	8000d7c <HAL_UART_Transmit+0x82>
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	691b      	ldr	r3, [r3, #16]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d104      	bne.n	8000d7c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	61bb      	str	r3, [r7, #24]
 8000d7a:	e003      	b.n	8000d84 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8000d8c:	e02a      	b.n	8000de4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	2200      	movs	r2, #0
 8000d96:	2180      	movs	r1, #128	; 0x80
 8000d98:	68f8      	ldr	r0, [r7, #12]
 8000d9a:	f000 f840 	bl	8000e1e <UART_WaitOnFlagUntilTimeout>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8000da4:	2303      	movs	r3, #3
 8000da6:	e036      	b.n	8000e16 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d10b      	bne.n	8000dc6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000dbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	3302      	adds	r3, #2
 8000dc2:	61bb      	str	r3, [r7, #24]
 8000dc4:	e007      	b.n	8000dd6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	781a      	ldrb	r2, [r3, #0]
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d1cf      	bne.n	8000d8e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	2200      	movs	r2, #0
 8000df6:	2140      	movs	r1, #64	; 0x40
 8000df8:	68f8      	ldr	r0, [r7, #12]
 8000dfa:	f000 f810 	bl	8000e1e <UART_WaitOnFlagUntilTimeout>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8000e04:	2303      	movs	r3, #3
 8000e06:	e006      	b.n	8000e16 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2220      	movs	r2, #32
 8000e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8000e10:	2300      	movs	r3, #0
 8000e12:	e000      	b.n	8000e16 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8000e14:	2302      	movs	r3, #2
  }
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3720      	adds	r7, #32
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b084      	sub	sp, #16
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	60f8      	str	r0, [r7, #12]
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000e2e:	e02c      	b.n	8000e8a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e36:	d028      	beq.n	8000e8a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d007      	beq.n	8000e4e <UART_WaitOnFlagUntilTimeout+0x30>
 8000e3e:	f7ff fbb9 	bl	80005b4 <HAL_GetTick>
 8000e42:	4602      	mov	r2, r0
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d21d      	bcs.n	8000e8a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	68da      	ldr	r2, [r3, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000e5c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	695a      	ldr	r2, [r3, #20]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f022 0201 	bic.w	r2, r2, #1
 8000e6c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2220      	movs	r2, #32
 8000e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	2220      	movs	r2, #32
 8000e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e00f      	b.n	8000eaa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4013      	ands	r3, r2
 8000e94:	68ba      	ldr	r2, [r7, #8]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	bf0c      	ite	eq
 8000e9a:	2301      	moveq	r3, #1
 8000e9c:	2300      	movne	r3, #0
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d0c3      	beq.n	8000e30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000eb8:	b085      	sub	sp, #20
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	691b      	ldr	r3, [r3, #16]
 8000ec4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689a      	ldr	r2, [r3, #8]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	691b      	ldr	r3, [r3, #16]
 8000edc:	431a      	orrs	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	431a      	orrs	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	69db      	ldr	r3, [r3, #28]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8000ef6:	f023 030c 	bic.w	r3, r3, #12
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	6812      	ldr	r2, [r2, #0]
 8000efe:	68b9      	ldr	r1, [r7, #8]
 8000f00:	430b      	orrs	r3, r1
 8000f02:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	699a      	ldr	r2, [r3, #24]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	430a      	orrs	r2, r1
 8000f18:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4ad0      	ldr	r2, [pc, #832]	; (8001260 <UART_SetConfig+0x3ac>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d004      	beq.n	8000f2e <UART_SetConfig+0x7a>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4ace      	ldr	r2, [pc, #824]	; (8001264 <UART_SetConfig+0x3b0>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d103      	bne.n	8000f36 <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000f2e:	f7ff fe79 	bl	8000c24 <HAL_RCC_GetPCLK2Freq>
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	e002      	b.n	8000f3c <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8000f36:	f7ff fe61 	bl	8000bfc <HAL_RCC_GetPCLK1Freq>
 8000f3a:	60f8      	str	r0, [r7, #12]
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	69db      	ldr	r3, [r3, #28]
 8000f40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000f44:	f040 80ba 	bne.w	80010bc <UART_SetConfig+0x208>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	461d      	mov	r5, r3
 8000f4c:	f04f 0600 	mov.w	r6, #0
 8000f50:	46a8      	mov	r8, r5
 8000f52:	46b1      	mov	r9, r6
 8000f54:	eb18 0308 	adds.w	r3, r8, r8
 8000f58:	eb49 0409 	adc.w	r4, r9, r9
 8000f5c:	4698      	mov	r8, r3
 8000f5e:	46a1      	mov	r9, r4
 8000f60:	eb18 0805 	adds.w	r8, r8, r5
 8000f64:	eb49 0906 	adc.w	r9, r9, r6
 8000f68:	f04f 0100 	mov.w	r1, #0
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8000f74:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8000f78:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8000f7c:	4688      	mov	r8, r1
 8000f7e:	4691      	mov	r9, r2
 8000f80:	eb18 0005 	adds.w	r0, r8, r5
 8000f84:	eb49 0106 	adc.w	r1, r9, r6
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	461d      	mov	r5, r3
 8000f8e:	f04f 0600 	mov.w	r6, #0
 8000f92:	196b      	adds	r3, r5, r5
 8000f94:	eb46 0406 	adc.w	r4, r6, r6
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4623      	mov	r3, r4
 8000f9c:	f7ff f91c 	bl	80001d8 <__aeabi_uldivmod>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	460c      	mov	r4, r1
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4bb0      	ldr	r3, [pc, #704]	; (8001268 <UART_SetConfig+0x3b4>)
 8000fa8:	fba3 2302 	umull	r2, r3, r3, r2
 8000fac:	095b      	lsrs	r3, r3, #5
 8000fae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	461d      	mov	r5, r3
 8000fb6:	f04f 0600 	mov.w	r6, #0
 8000fba:	46a9      	mov	r9, r5
 8000fbc:	46b2      	mov	sl, r6
 8000fbe:	eb19 0309 	adds.w	r3, r9, r9
 8000fc2:	eb4a 040a 	adc.w	r4, sl, sl
 8000fc6:	4699      	mov	r9, r3
 8000fc8:	46a2      	mov	sl, r4
 8000fca:	eb19 0905 	adds.w	r9, r9, r5
 8000fce:	eb4a 0a06 	adc.w	sl, sl, r6
 8000fd2:	f04f 0100 	mov.w	r1, #0
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000fde:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8000fe2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8000fe6:	4689      	mov	r9, r1
 8000fe8:	4692      	mov	sl, r2
 8000fea:	eb19 0005 	adds.w	r0, r9, r5
 8000fee:	eb4a 0106 	adc.w	r1, sl, r6
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	461d      	mov	r5, r3
 8000ff8:	f04f 0600 	mov.w	r6, #0
 8000ffc:	196b      	adds	r3, r5, r5
 8000ffe:	eb46 0406 	adc.w	r4, r6, r6
 8001002:	461a      	mov	r2, r3
 8001004:	4623      	mov	r3, r4
 8001006:	f7ff f8e7 	bl	80001d8 <__aeabi_uldivmod>
 800100a:	4603      	mov	r3, r0
 800100c:	460c      	mov	r4, r1
 800100e:	461a      	mov	r2, r3
 8001010:	4b95      	ldr	r3, [pc, #596]	; (8001268 <UART_SetConfig+0x3b4>)
 8001012:	fba3 1302 	umull	r1, r3, r3, r2
 8001016:	095b      	lsrs	r3, r3, #5
 8001018:	2164      	movs	r1, #100	; 0x64
 800101a:	fb01 f303 	mul.w	r3, r1, r3
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	3332      	adds	r3, #50	; 0x32
 8001024:	4a90      	ldr	r2, [pc, #576]	; (8001268 <UART_SetConfig+0x3b4>)
 8001026:	fba2 2303 	umull	r2, r3, r2, r3
 800102a:	095b      	lsrs	r3, r3, #5
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001032:	4498      	add	r8, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	461d      	mov	r5, r3
 8001038:	f04f 0600 	mov.w	r6, #0
 800103c:	46a9      	mov	r9, r5
 800103e:	46b2      	mov	sl, r6
 8001040:	eb19 0309 	adds.w	r3, r9, r9
 8001044:	eb4a 040a 	adc.w	r4, sl, sl
 8001048:	4699      	mov	r9, r3
 800104a:	46a2      	mov	sl, r4
 800104c:	eb19 0905 	adds.w	r9, r9, r5
 8001050:	eb4a 0a06 	adc.w	sl, sl, r6
 8001054:	f04f 0100 	mov.w	r1, #0
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001060:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001064:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001068:	4689      	mov	r9, r1
 800106a:	4692      	mov	sl, r2
 800106c:	eb19 0005 	adds.w	r0, r9, r5
 8001070:	eb4a 0106 	adc.w	r1, sl, r6
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	461d      	mov	r5, r3
 800107a:	f04f 0600 	mov.w	r6, #0
 800107e:	196b      	adds	r3, r5, r5
 8001080:	eb46 0406 	adc.w	r4, r6, r6
 8001084:	461a      	mov	r2, r3
 8001086:	4623      	mov	r3, r4
 8001088:	f7ff f8a6 	bl	80001d8 <__aeabi_uldivmod>
 800108c:	4603      	mov	r3, r0
 800108e:	460c      	mov	r4, r1
 8001090:	461a      	mov	r2, r3
 8001092:	4b75      	ldr	r3, [pc, #468]	; (8001268 <UART_SetConfig+0x3b4>)
 8001094:	fba3 1302 	umull	r1, r3, r3, r2
 8001098:	095b      	lsrs	r3, r3, #5
 800109a:	2164      	movs	r1, #100	; 0x64
 800109c:	fb01 f303 	mul.w	r3, r1, r3
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	3332      	adds	r3, #50	; 0x32
 80010a6:	4a70      	ldr	r2, [pc, #448]	; (8001268 <UART_SetConfig+0x3b4>)
 80010a8:	fba2 2303 	umull	r2, r3, r2, r3
 80010ac:	095b      	lsrs	r3, r3, #5
 80010ae:	f003 0207 	and.w	r2, r3, #7
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4442      	add	r2, r8
 80010b8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80010ba:	e0cc      	b.n	8001256 <UART_SetConfig+0x3a2>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	469a      	mov	sl, r3
 80010c0:	f04f 0b00 	mov.w	fp, #0
 80010c4:	46d0      	mov	r8, sl
 80010c6:	46d9      	mov	r9, fp
 80010c8:	eb18 0308 	adds.w	r3, r8, r8
 80010cc:	eb49 0409 	adc.w	r4, r9, r9
 80010d0:	4698      	mov	r8, r3
 80010d2:	46a1      	mov	r9, r4
 80010d4:	eb18 080a 	adds.w	r8, r8, sl
 80010d8:	eb49 090b 	adc.w	r9, r9, fp
 80010dc:	f04f 0100 	mov.w	r1, #0
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80010e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80010ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80010f0:	4688      	mov	r8, r1
 80010f2:	4691      	mov	r9, r2
 80010f4:	eb1a 0508 	adds.w	r5, sl, r8
 80010f8:	eb4b 0609 	adc.w	r6, fp, r9
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	4619      	mov	r1, r3
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	f04f 0300 	mov.w	r3, #0
 800110a:	f04f 0400 	mov.w	r4, #0
 800110e:	0094      	lsls	r4, r2, #2
 8001110:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001114:	008b      	lsls	r3, r1, #2
 8001116:	461a      	mov	r2, r3
 8001118:	4623      	mov	r3, r4
 800111a:	4628      	mov	r0, r5
 800111c:	4631      	mov	r1, r6
 800111e:	f7ff f85b 	bl	80001d8 <__aeabi_uldivmod>
 8001122:	4603      	mov	r3, r0
 8001124:	460c      	mov	r4, r1
 8001126:	461a      	mov	r2, r3
 8001128:	4b4f      	ldr	r3, [pc, #316]	; (8001268 <UART_SetConfig+0x3b4>)
 800112a:	fba3 2302 	umull	r2, r3, r3, r2
 800112e:	095b      	lsrs	r3, r3, #5
 8001130:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	469b      	mov	fp, r3
 8001138:	f04f 0c00 	mov.w	ip, #0
 800113c:	46d9      	mov	r9, fp
 800113e:	46e2      	mov	sl, ip
 8001140:	eb19 0309 	adds.w	r3, r9, r9
 8001144:	eb4a 040a 	adc.w	r4, sl, sl
 8001148:	4699      	mov	r9, r3
 800114a:	46a2      	mov	sl, r4
 800114c:	eb19 090b 	adds.w	r9, r9, fp
 8001150:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001154:	f04f 0100 	mov.w	r1, #0
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001160:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001164:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001168:	4689      	mov	r9, r1
 800116a:	4692      	mov	sl, r2
 800116c:	eb1b 0509 	adds.w	r5, fp, r9
 8001170:	eb4c 060a 	adc.w	r6, ip, sl
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	4619      	mov	r1, r3
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	f04f 0300 	mov.w	r3, #0
 8001182:	f04f 0400 	mov.w	r4, #0
 8001186:	0094      	lsls	r4, r2, #2
 8001188:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800118c:	008b      	lsls	r3, r1, #2
 800118e:	461a      	mov	r2, r3
 8001190:	4623      	mov	r3, r4
 8001192:	4628      	mov	r0, r5
 8001194:	4631      	mov	r1, r6
 8001196:	f7ff f81f 	bl	80001d8 <__aeabi_uldivmod>
 800119a:	4603      	mov	r3, r0
 800119c:	460c      	mov	r4, r1
 800119e:	461a      	mov	r2, r3
 80011a0:	4b31      	ldr	r3, [pc, #196]	; (8001268 <UART_SetConfig+0x3b4>)
 80011a2:	fba3 1302 	umull	r1, r3, r3, r2
 80011a6:	095b      	lsrs	r3, r3, #5
 80011a8:	2164      	movs	r1, #100	; 0x64
 80011aa:	fb01 f303 	mul.w	r3, r1, r3
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	011b      	lsls	r3, r3, #4
 80011b2:	3332      	adds	r3, #50	; 0x32
 80011b4:	4a2c      	ldr	r2, [pc, #176]	; (8001268 <UART_SetConfig+0x3b4>)
 80011b6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ba:	095b      	lsrs	r3, r3, #5
 80011bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011c0:	4498      	add	r8, r3
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	469b      	mov	fp, r3
 80011c6:	f04f 0c00 	mov.w	ip, #0
 80011ca:	46d9      	mov	r9, fp
 80011cc:	46e2      	mov	sl, ip
 80011ce:	eb19 0309 	adds.w	r3, r9, r9
 80011d2:	eb4a 040a 	adc.w	r4, sl, sl
 80011d6:	4699      	mov	r9, r3
 80011d8:	46a2      	mov	sl, r4
 80011da:	eb19 090b 	adds.w	r9, r9, fp
 80011de:	eb4a 0a0c 	adc.w	sl, sl, ip
 80011e2:	f04f 0100 	mov.w	r1, #0
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80011ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80011f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80011f6:	4689      	mov	r9, r1
 80011f8:	4692      	mov	sl, r2
 80011fa:	eb1b 0509 	adds.w	r5, fp, r9
 80011fe:	eb4c 060a 	adc.w	r6, ip, sl
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	4619      	mov	r1, r3
 8001208:	f04f 0200 	mov.w	r2, #0
 800120c:	f04f 0300 	mov.w	r3, #0
 8001210:	f04f 0400 	mov.w	r4, #0
 8001214:	0094      	lsls	r4, r2, #2
 8001216:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800121a:	008b      	lsls	r3, r1, #2
 800121c:	461a      	mov	r2, r3
 800121e:	4623      	mov	r3, r4
 8001220:	4628      	mov	r0, r5
 8001222:	4631      	mov	r1, r6
 8001224:	f7fe ffd8 	bl	80001d8 <__aeabi_uldivmod>
 8001228:	4603      	mov	r3, r0
 800122a:	460c      	mov	r4, r1
 800122c:	461a      	mov	r2, r3
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <UART_SetConfig+0x3b4>)
 8001230:	fba3 1302 	umull	r1, r3, r3, r2
 8001234:	095b      	lsrs	r3, r3, #5
 8001236:	2164      	movs	r1, #100	; 0x64
 8001238:	fb01 f303 	mul.w	r3, r1, r3
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	011b      	lsls	r3, r3, #4
 8001240:	3332      	adds	r3, #50	; 0x32
 8001242:	4a09      	ldr	r2, [pc, #36]	; (8001268 <UART_SetConfig+0x3b4>)
 8001244:	fba2 2303 	umull	r2, r3, r2, r3
 8001248:	095b      	lsrs	r3, r3, #5
 800124a:	f003 020f 	and.w	r2, r3, #15
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4442      	add	r2, r8
 8001254:	609a      	str	r2, [r3, #8]
}
 8001256:	bf00      	nop
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001260:	40011000 	.word	0x40011000
 8001264:	40011400 	.word	0x40011400
 8001268:	51eb851f 	.word	0x51eb851f

0800126c <CommsN64Console_Init>:
#include "comms_n64_console.h"

// Initializer
void CommsN64Console_Init()
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0
	/* Set parameters for n64 communication pins */

	// Clocks
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	4b30      	ldr	r3, [pc, #192]	; (8001338 <CommsN64Console_Init+0xcc>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a2f      	ldr	r2, [pc, #188]	; (8001338 <CommsN64Console_Init+0xcc>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <CommsN64Console_Init+0xcc>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_USART1_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	4b29      	ldr	r3, [pc, #164]	; (8001338 <CommsN64Console_Init+0xcc>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	4a28      	ldr	r2, [pc, #160]	; (8001338 <CommsN64Console_Init+0xcc>)
 8001298:	f043 0310 	orr.w	r3, r3, #16
 800129c:	6453      	str	r3, [r2, #68]	; 0x44
 800129e:	4b26      	ldr	r3, [pc, #152]	; (8001338 <CommsN64Console_Init+0xcc>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	f003 0310 	and.w	r3, r3, #16
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

	// Init structure
	GPIO_InitTypeDef GPIO_InitStruct_CommsN64Console = {0};
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	611a      	str	r2, [r3, #16]

	// External pullup control
	GPIO_InitStruct_CommsN64Console.Pin = COMMS_N64_PULLUP_PIN_HAL;
 80012ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012be:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct_CommsN64Console.Mode = GPIO_MODE_OUTPUT_PP;
 80012c0:	2301      	movs	r3, #1
 80012c2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct_CommsN64Console.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct_CommsN64Console.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(COMMS_N64_PULLUP_PORT, &GPIO_InitStruct_CommsN64Console);
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	4619      	mov	r1, r3
 80012d2:	481a      	ldr	r0, [pc, #104]	; (800133c <CommsN64Console_Init+0xd0>)
 80012d4:	f7ff fa82 	bl	80007dc <HAL_GPIO_Init>

	// USART1 TX/RX
	GPIO_InitStruct_CommsN64Console.Pin = COMMS_N64_TX_PIN_HAL | COMMS_N64_RX_PIN_HAL;
 80012d8:	23c0      	movs	r3, #192	; 0xc0
 80012da:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct_CommsN64Console.Mode = GPIO_MODE_AF_OD;
 80012dc:	2312      	movs	r3, #18
 80012de:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct_CommsN64Console.Alternate = GPIO_AF7_USART1;
 80012e0:	2307      	movs	r3, #7
 80012e2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct_CommsN64Console.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct_CommsN64Console.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(COMMS_N64_TX_PORT, &GPIO_InitStruct_CommsN64Console);
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	4619      	mov	r1, r3
 80012f2:	4812      	ldr	r0, [pc, #72]	; (800133c <CommsN64Console_Init+0xd0>)
 80012f4:	f7ff fa72 	bl	80007dc <HAL_GPIO_Init>

	// Configure USART1
	huart1.Instance = USART1;
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <CommsN64Console_Init+0xd4>)
 80012fa:	4a12      	ldr	r2, [pc, #72]	; (8001344 <CommsN64Console_Init+0xd8>)
 80012fc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 1250000;
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <CommsN64Console_Init+0xd4>)
 8001300:	4a11      	ldr	r2, [pc, #68]	; (8001348 <CommsN64Console_Init+0xdc>)
 8001302:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001304:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <CommsN64Console_Init+0xd4>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800130a:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <CommsN64Console_Init+0xd4>)
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <CommsN64Console_Init+0xd4>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <CommsN64Console_Init+0xd4>)
 8001318:	220c      	movs	r2, #12
 800131a:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <CommsN64Console_Init+0xd4>)
 800131e:	2200      	movs	r2, #0
 8001320:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <CommsN64Console_Init+0xd4>)
 8001324:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001328:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&huart1);
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <CommsN64Console_Init+0xd4>)
 800132c:	f7ff fc8e 	bl	8000c4c <HAL_UART_Init>
}
 8001330:	bf00      	nop
 8001332:	3720      	adds	r7, #32
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40023800 	.word	0x40023800
 800133c:	40020400 	.word	0x40020400
 8001340:	20000028 	.word	0x20000028
 8001344:	40011000 	.word	0x40011000
 8001348:	001312d0 	.word	0x001312d0

0800134c <CommsN64Console_SetPullup>:

void CommsN64Console_SetPullup(N64PullupState_t pull)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
	if(pull == N64_NOPULL)
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d106      	bne.n	800136a <CommsN64Console_SetPullup+0x1e>
	{
		HAL_GPIO_WritePin(COMMS_N64_PULLUP_PORT, COMMS_N64_PULLUP_PIN_HAL, GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001362:	4808      	ldr	r0, [pc, #32]	; (8001384 <CommsN64Console_SetPullup+0x38>)
 8001364:	f7ff fbbc 	bl	8000ae0 <HAL_GPIO_WritePin>
	}
	else
	{
		// invalid argument
	}
}
 8001368:	e008      	b.n	800137c <CommsN64Console_SetPullup+0x30>
	else if(pull == N64_PULLUP)
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d105      	bne.n	800137c <CommsN64Console_SetPullup+0x30>
		HAL_GPIO_WritePin(COMMS_N64_PULLUP_PORT, COMMS_N64_PULLUP_PIN_HAL, GPIO_PIN_SET);
 8001370:	2201      	movs	r2, #1
 8001372:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001376:	4803      	ldr	r0, [pc, #12]	; (8001384 <CommsN64Console_SetPullup+0x38>)
 8001378:	f7ff fbb2 	bl	8000ae0 <HAL_GPIO_WritePin>
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40020400 	.word	0x40020400

08001388 <CommsN64Console_SendPollForData>:

void CommsN64Console_SendPollForData()
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
	// Setup array to send data
	uint8_t dataToSend[4] = {0x08, 0x08, 0x08, 0xE8};
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <CommsN64Console_SendPollForData+0x24>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, dataToSend, 4, 1000);
 8001394:	1d39      	adds	r1, r7, #4
 8001396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139a:	2204      	movs	r2, #4
 800139c:	4804      	ldr	r0, [pc, #16]	; (80013b0 <CommsN64Console_SendPollForData+0x28>)
 800139e:	f7ff fcac 	bl	8000cfa <HAL_UART_Transmit>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	0800166c 	.word	0x0800166c
 80013b0:	20000028 	.word	0x20000028

080013b4 <main>:
#include "main.h"

int main(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
	/* Initialize all required modules and clocks */
	HAL_Init();
 80013b8:	f7ff f88e 	bl	80004d8 <HAL_Init>
	SystemClock_Config();
 80013bc:	f000 f898 	bl	80014f0 <SystemClock_Config>
	CommsN64Console_Init();
 80013c0:	f7ff ff54 	bl	800126c <CommsN64Console_Init>
	Main_Init();
 80013c4:	f000 f834 	bl	8001430 <Main_Init>

	/* Apply a pullup on n64 data line */
	CommsN64Console_SetPullup(N64_PULLUP);
 80013c8:	2001      	movs	r0, #1
 80013ca:	f7ff ffbf 	bl	800134c <CommsN64Console_SetPullup>

	/* Main application loop */
    while(1)
    {
    	CommsN64Console_SendPollForData();
 80013ce:	f7ff ffdb 	bl	8001388 <CommsN64Console_SendPollForData>
    	Main_SetBlueLed(BLUE_LED_ON);
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <main+0x44>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 f812 	bl	8001400 <Main_SetBlueLed>
    	HAL_Delay(500);
 80013dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013e0:	f7ff f8f4 	bl	80005cc <HAL_Delay>
    	Main_SetBlueLed(BLUE_LED_OFF);
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <main+0x48>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 f809 	bl	8001400 <Main_SetBlueLed>
    	HAL_Delay(500);
 80013ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013f2:	f7ff f8eb 	bl	80005cc <HAL_Delay>
    	CommsN64Console_SendPollForData();
 80013f6:	e7ea      	b.n	80013ce <main+0x1a>
 80013f8:	2000006c 	.word	0x2000006c
 80013fc:	20000005 	.word	0x20000005

08001400 <Main_SetBlueLed>:
    }
}

// Setters
void Main_SetBlueLed(GPIO_PinState pinState)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN_HAL, pinState);
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	461a      	mov	r2, r3
 800140e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001412:	4803      	ldr	r0, [pc, #12]	; (8001420 <Main_SetBlueLed+0x20>)
 8001414:	f7ff fb64 	bl	8000ae0 <HAL_GPIO_WritePin>
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40020800 	.word	0x40020800

08001424 <SysTick_Handler>:

// Misc
void SysTick_Handler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001428:	f7ff f8b0 	bl	800058c <HAL_IncTick>
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}

08001430 <Main_Init>:

// Initializer
void Main_Init()
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	4b2a      	ldr	r3, [pc, #168]	; (80014e4 <Main_Init+0xb4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a29      	ldr	r2, [pc, #164]	; (80014e4 <Main_Init+0xb4>)
 8001440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b27      	ldr	r3, [pc, #156]	; (80014e4 <Main_Init+0xb4>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <Main_Init+0xb4>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a22      	ldr	r2, [pc, #136]	; (80014e4 <Main_Init+0xb4>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <Main_Init+0xb4>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct_Main = {0};
 800146e:	f107 030c 	add.w	r3, r7, #12
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct_Main.Pin = GPIO_PIN_8;
 800147e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001482:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct_Main.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct_Main.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct_Main.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct_Main.Alternate = GPIO_AF0_MCO;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct_Main);
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	4619      	mov	r1, r3
 800149a:	4813      	ldr	r0, [pc, #76]	; (80014e8 <Main_Init+0xb8>)
 800149c:	f7ff f99e 	bl	80007dc <HAL_GPIO_Init>

	/* Initialize the blue led */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80014a0:	2300      	movs	r3, #0
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <Main_Init+0xb4>)
 80014a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a8:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <Main_Init+0xb4>)
 80014aa:	f043 0304 	orr.w	r3, r3, #4
 80014ae:	6313      	str	r3, [r2, #48]	; 0x30
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <Main_Init+0xb4>)
 80014b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	603b      	str	r3, [r7, #0]
 80014ba:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct_Main.Pin = BLUE_LED_PIN_HAL;
 80014bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct_Main.Mode = GPIO_MODE_OUTPUT_PP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct_Main.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct_Main.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(BLUE_LED_PORT, &GPIO_InitStruct_Main);
 80014ce:	f107 030c 	add.w	r3, r7, #12
 80014d2:	4619      	mov	r1, r3
 80014d4:	4805      	ldr	r0, [pc, #20]	; (80014ec <Main_Init+0xbc>)
 80014d6:	f7ff f981 	bl	80007dc <HAL_GPIO_Init>
}
 80014da:	bf00      	nop
 80014dc:	3720      	adds	r7, #32
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40020000 	.word	0x40020000
 80014ec:	40020800 	.word	0x40020800

080014f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b094      	sub	sp, #80	; 0x50
 80014f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f6:	f107 0320 	add.w	r3, r7, #32
 80014fa:	2230      	movs	r2, #48	; 0x30
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 f8a0 	bl	8001644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001514:	2300      	movs	r3, #0
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <SystemClock_Config+0xb0>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	4a20      	ldr	r2, [pc, #128]	; (80015a0 <SystemClock_Config+0xb0>)
 800151e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001522:	6413      	str	r3, [r2, #64]	; 0x40
 8001524:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <SystemClock_Config+0xb0>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001530:	2300      	movs	r3, #0
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <SystemClock_Config+0xb4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a1a      	ldr	r2, [pc, #104]	; (80015a4 <SystemClock_Config+0xb4>)
 800153a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800153e:	6013      	str	r3, [r2, #0]
 8001540:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <SystemClock_Config+0xb4>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800154c:	2303      	movs	r3, #3
 800154e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001550:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001556:	2301      	movs	r3, #1
 8001558:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800155a:	2310      	movs	r3, #16
 800155c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800155e:	2302      	movs	r3, #2
 8001560:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001562:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001566:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001568:	230c      	movs	r3, #12
 800156a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800156c:	2360      	movs	r3, #96	; 0x60
 800156e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001570:	2302      	movs	r3, #2
 8001572:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001574:	2304      	movs	r3, #4
 8001576:	64fb      	str	r3, [r7, #76]	; 0x4c
//  {
//    Error_Handler();
//  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001578:	230f      	movs	r3, #15
 800157a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800157c:	2302      	movs	r3, #2
 800157e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001588:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]

//  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
//  {
//    Error_Handler();
//  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800158e:	2200      	movs	r2, #0
 8001590:	2100      	movs	r1, #0
 8001592:	2000      	movs	r0, #0
 8001594:	f7ff fabe 	bl	8000b14 <HAL_RCC_MCOConfig>
}
 8001598:	bf00      	nop
 800159a:	3750      	adds	r7, #80	; 0x50
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40007000 	.word	0x40007000

080015a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015a8:	480d      	ldr	r0, [pc, #52]	; (80015e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015aa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80015ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015b0:	480c      	ldr	r0, [pc, #48]	; (80015e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80015b2:	490d      	ldr	r1, [pc, #52]	; (80015e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015b4:	4a0d      	ldr	r2, [pc, #52]	; (80015ec <LoopForever+0xe>)
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b8:	e002      	b.n	80015c0 <LoopCopyDataInit>

080015ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015be:	3304      	adds	r3, #4

080015c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c4:	d3f9      	bcc.n	80015ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c6:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015c8:	4c0a      	ldr	r4, [pc, #40]	; (80015f4 <LoopForever+0x16>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015cc:	e001      	b.n	80015d2 <LoopFillZerobss>

080015ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d0:	3204      	adds	r2, #4

080015d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d4:	d3fb      	bcc.n	80015ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015d6:	f000 f811 	bl	80015fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015da:	f7ff feeb 	bl	80013b4 <main>

080015de <LoopForever>:

LoopForever:
    b LoopForever
 80015de:	e7fe      	b.n	80015de <LoopForever>
  ldr   r0, =_estack
 80015e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015ec:	08001688 	.word	0x08001688
  ldr r2, =_sbss
 80015f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015f4:	20000074 	.word	0x20000074

080015f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015f8:	e7fe      	b.n	80015f8 <ADC_IRQHandler>
	...

080015fc <__libc_init_array>:
 80015fc:	b570      	push	{r4, r5, r6, lr}
 80015fe:	4e0d      	ldr	r6, [pc, #52]	; (8001634 <__libc_init_array+0x38>)
 8001600:	4c0d      	ldr	r4, [pc, #52]	; (8001638 <__libc_init_array+0x3c>)
 8001602:	1ba4      	subs	r4, r4, r6
 8001604:	10a4      	asrs	r4, r4, #2
 8001606:	2500      	movs	r5, #0
 8001608:	42a5      	cmp	r5, r4
 800160a:	d109      	bne.n	8001620 <__libc_init_array+0x24>
 800160c:	4e0b      	ldr	r6, [pc, #44]	; (800163c <__libc_init_array+0x40>)
 800160e:	4c0c      	ldr	r4, [pc, #48]	; (8001640 <__libc_init_array+0x44>)
 8001610:	f000 f820 	bl	8001654 <_init>
 8001614:	1ba4      	subs	r4, r4, r6
 8001616:	10a4      	asrs	r4, r4, #2
 8001618:	2500      	movs	r5, #0
 800161a:	42a5      	cmp	r5, r4
 800161c:	d105      	bne.n	800162a <__libc_init_array+0x2e>
 800161e:	bd70      	pop	{r4, r5, r6, pc}
 8001620:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001624:	4798      	blx	r3
 8001626:	3501      	adds	r5, #1
 8001628:	e7ee      	b.n	8001608 <__libc_init_array+0xc>
 800162a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800162e:	4798      	blx	r3
 8001630:	3501      	adds	r5, #1
 8001632:	e7f2      	b.n	800161a <__libc_init_array+0x1e>
 8001634:	08001680 	.word	0x08001680
 8001638:	08001680 	.word	0x08001680
 800163c:	08001680 	.word	0x08001680
 8001640:	08001684 	.word	0x08001684

08001644 <memset>:
 8001644:	4402      	add	r2, r0
 8001646:	4603      	mov	r3, r0
 8001648:	4293      	cmp	r3, r2
 800164a:	d100      	bne.n	800164e <memset+0xa>
 800164c:	4770      	bx	lr
 800164e:	f803 1b01 	strb.w	r1, [r3], #1
 8001652:	e7f9      	b.n	8001648 <memset+0x4>

08001654 <_init>:
 8001654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001656:	bf00      	nop
 8001658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800165a:	bc08      	pop	{r3}
 800165c:	469e      	mov	lr, r3
 800165e:	4770      	bx	lr

08001660 <_fini>:
 8001660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001662:	bf00      	nop
 8001664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001666:	bc08      	pop	{r3}
 8001668:	469e      	mov	lr, r3
 800166a:	4770      	bx	lr
