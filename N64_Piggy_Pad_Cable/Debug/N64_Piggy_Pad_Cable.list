
N64_Piggy_Pad_Cable.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007f4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800098c  0800098c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800098c  0800098c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800098c  0800098c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800098c  0800098c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800098c  0800098c  0001098c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000990  08000990  00010990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  080009a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  080009a0  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000288b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000008a9  00000000  00000000  000228c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002d8  00000000  00000000  00023170  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000278  00000000  00000000  00023448  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000080b  00000000  00000000  000236c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002b3d  00000000  00000000  00023ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00081e26  00000000  00000000  00026a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a882e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a14  00000000  00000000  000a88ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000974 	.word	0x08000974

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08000974 	.word	0x08000974

080001d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001dc:	4b0e      	ldr	r3, [pc, #56]	; (8000218 <HAL_Init+0x40>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a0d      	ldr	r2, [pc, #52]	; (8000218 <HAL_Init+0x40>)
 80001e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80001e8:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <HAL_Init+0x40>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <HAL_Init+0x40>)
 80001ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f4:	4b08      	ldr	r3, [pc, #32]	; (8000218 <HAL_Init+0x40>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a07      	ldr	r2, [pc, #28]	; (8000218 <HAL_Init+0x40>)
 80001fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000200:	2003      	movs	r0, #3
 8000202:	f000 f937 	bl	8000474 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000206:	200f      	movs	r0, #15
 8000208:	f000 f810 	bl	800022c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800020c:	f000 f806 	bl	800021c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000210:	2300      	movs	r3, #0
}
 8000212:	4618      	mov	r0, r3
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40023c00 	.word	0x40023c00

0800021c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
	...

0800022c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000234:	4b12      	ldr	r3, [pc, #72]	; (8000280 <HAL_InitTick+0x54>)
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	4b12      	ldr	r3, [pc, #72]	; (8000284 <HAL_InitTick+0x58>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	4619      	mov	r1, r3
 800023e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000242:	fbb3 f3f1 	udiv	r3, r3, r1
 8000246:	fbb2 f3f3 	udiv	r3, r2, r3
 800024a:	4618      	mov	r0, r3
 800024c:	f000 f939 	bl	80004c2 <HAL_SYSTICK_Config>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000256:	2301      	movs	r3, #1
 8000258:	e00e      	b.n	8000278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	2b0f      	cmp	r3, #15
 800025e:	d80a      	bhi.n	8000276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000260:	2200      	movs	r2, #0
 8000262:	6879      	ldr	r1, [r7, #4]
 8000264:	f04f 30ff 	mov.w	r0, #4294967295
 8000268:	f000 f90f 	bl	800048a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800026c:	4a06      	ldr	r2, [pc, #24]	; (8000288 <HAL_InitTick+0x5c>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000272:	2300      	movs	r3, #0
 8000274:	e000      	b.n	8000278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000276:	2301      	movs	r3, #1
}
 8000278:	4618      	mov	r0, r3
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	20000008 	.word	0x20000008
 8000284:	20000004 	.word	0x20000004
 8000288:	20000000 	.word	0x20000000

0800028c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000290:	4b06      	ldr	r3, [pc, #24]	; (80002ac <HAL_IncTick+0x20>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	461a      	mov	r2, r3
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <HAL_IncTick+0x24>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4413      	add	r3, r2
 800029c:	4a04      	ldr	r2, [pc, #16]	; (80002b0 <HAL_IncTick+0x24>)
 800029e:	6013      	str	r3, [r2, #0]
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	20000004 	.word	0x20000004
 80002b0:	2000002c 	.word	0x2000002c

080002b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
  return uwTick;
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <HAL_GetTick+0x14>)
 80002ba:	681b      	ldr	r3, [r3, #0]
}
 80002bc:	4618      	mov	r0, r3
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	2000002c 	.word	0x2000002c

080002cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002d4:	f7ff ffee 	bl	80002b4 <HAL_GetTick>
 80002d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002e4:	d005      	beq.n	80002f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80002e6:	4b09      	ldr	r3, [pc, #36]	; (800030c <HAL_Delay+0x40>)
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	461a      	mov	r2, r3
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	4413      	add	r3, r2
 80002f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80002f2:	bf00      	nop
 80002f4:	f7ff ffde 	bl	80002b4 <HAL_GetTick>
 80002f8:	4602      	mov	r2, r0
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	1ad3      	subs	r3, r2, r3
 80002fe:	68fa      	ldr	r2, [r7, #12]
 8000300:	429a      	cmp	r2, r3
 8000302:	d8f7      	bhi.n	80002f4 <HAL_Delay+0x28>
  {
  }
}
 8000304:	bf00      	nop
 8000306:	3710      	adds	r7, #16
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000004 	.word	0x20000004

08000310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000310:	b480      	push	{r7}
 8000312:	b085      	sub	sp, #20
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	f003 0307 	and.w	r3, r3, #7
 800031e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000320:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <__NVIC_SetPriorityGrouping+0x44>)
 8000322:	68db      	ldr	r3, [r3, #12]
 8000324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000326:	68ba      	ldr	r2, [r7, #8]
 8000328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800032c:	4013      	ands	r3, r2
 800032e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000338:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800033c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000342:	4a04      	ldr	r2, [pc, #16]	; (8000354 <__NVIC_SetPriorityGrouping+0x44>)
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	60d3      	str	r3, [r2, #12]
}
 8000348:	bf00      	nop
 800034a:	3714      	adds	r7, #20
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	e000ed00 	.word	0xe000ed00

08000358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800035c:	4b04      	ldr	r3, [pc, #16]	; (8000370 <__NVIC_GetPriorityGrouping+0x18>)
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	0a1b      	lsrs	r3, r3, #8
 8000362:	f003 0307 	and.w	r3, r3, #7
}
 8000366:	4618      	mov	r0, r3
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr
 8000370:	e000ed00 	.word	0xe000ed00

08000374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	6039      	str	r1, [r7, #0]
 800037e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000384:	2b00      	cmp	r3, #0
 8000386:	db0a      	blt.n	800039e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	b2da      	uxtb	r2, r3
 800038c:	490c      	ldr	r1, [pc, #48]	; (80003c0 <__NVIC_SetPriority+0x4c>)
 800038e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000392:	0112      	lsls	r2, r2, #4
 8000394:	b2d2      	uxtb	r2, r2
 8000396:	440b      	add	r3, r1
 8000398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800039c:	e00a      	b.n	80003b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	b2da      	uxtb	r2, r3
 80003a2:	4908      	ldr	r1, [pc, #32]	; (80003c4 <__NVIC_SetPriority+0x50>)
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	f003 030f 	and.w	r3, r3, #15
 80003aa:	3b04      	subs	r3, #4
 80003ac:	0112      	lsls	r2, r2, #4
 80003ae:	b2d2      	uxtb	r2, r2
 80003b0:	440b      	add	r3, r1
 80003b2:	761a      	strb	r2, [r3, #24]
}
 80003b4:	bf00      	nop
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr
 80003c0:	e000e100 	.word	0xe000e100
 80003c4:	e000ed00 	.word	0xe000ed00

080003c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b089      	sub	sp, #36	; 0x24
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	60f8      	str	r0, [r7, #12]
 80003d0:	60b9      	str	r1, [r7, #8]
 80003d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	f003 0307 	and.w	r3, r3, #7
 80003da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003dc:	69fb      	ldr	r3, [r7, #28]
 80003de:	f1c3 0307 	rsb	r3, r3, #7
 80003e2:	2b04      	cmp	r3, #4
 80003e4:	bf28      	it	cs
 80003e6:	2304      	movcs	r3, #4
 80003e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003ea:	69fb      	ldr	r3, [r7, #28]
 80003ec:	3304      	adds	r3, #4
 80003ee:	2b06      	cmp	r3, #6
 80003f0:	d902      	bls.n	80003f8 <NVIC_EncodePriority+0x30>
 80003f2:	69fb      	ldr	r3, [r7, #28]
 80003f4:	3b03      	subs	r3, #3
 80003f6:	e000      	b.n	80003fa <NVIC_EncodePriority+0x32>
 80003f8:	2300      	movs	r3, #0
 80003fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000400:	69bb      	ldr	r3, [r7, #24]
 8000402:	fa02 f303 	lsl.w	r3, r2, r3
 8000406:	43da      	mvns	r2, r3
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	401a      	ands	r2, r3
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000410:	f04f 31ff 	mov.w	r1, #4294967295
 8000414:	697b      	ldr	r3, [r7, #20]
 8000416:	fa01 f303 	lsl.w	r3, r1, r3
 800041a:	43d9      	mvns	r1, r3
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000420:	4313      	orrs	r3, r2
         );
}
 8000422:	4618      	mov	r0, r3
 8000424:	3724      	adds	r7, #36	; 0x24
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
	...

08000430 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	3b01      	subs	r3, #1
 800043c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000440:	d301      	bcc.n	8000446 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000442:	2301      	movs	r3, #1
 8000444:	e00f      	b.n	8000466 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000446:	4a0a      	ldr	r2, [pc, #40]	; (8000470 <SysTick_Config+0x40>)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	3b01      	subs	r3, #1
 800044c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800044e:	210f      	movs	r1, #15
 8000450:	f04f 30ff 	mov.w	r0, #4294967295
 8000454:	f7ff ff8e 	bl	8000374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000458:	4b05      	ldr	r3, [pc, #20]	; (8000470 <SysTick_Config+0x40>)
 800045a:	2200      	movs	r2, #0
 800045c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800045e:	4b04      	ldr	r3, [pc, #16]	; (8000470 <SysTick_Config+0x40>)
 8000460:	2207      	movs	r2, #7
 8000462:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000464:	2300      	movs	r3, #0
}
 8000466:	4618      	mov	r0, r3
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	e000e010 	.word	0xe000e010

08000474 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800047c:	6878      	ldr	r0, [r7, #4]
 800047e:	f7ff ff47 	bl	8000310 <__NVIC_SetPriorityGrouping>
}
 8000482:	bf00      	nop
 8000484:	3708      	adds	r7, #8
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}

0800048a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800048a:	b580      	push	{r7, lr}
 800048c:	b086      	sub	sp, #24
 800048e:	af00      	add	r7, sp, #0
 8000490:	4603      	mov	r3, r0
 8000492:	60b9      	str	r1, [r7, #8]
 8000494:	607a      	str	r2, [r7, #4]
 8000496:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000498:	2300      	movs	r3, #0
 800049a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800049c:	f7ff ff5c 	bl	8000358 <__NVIC_GetPriorityGrouping>
 80004a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004a2:	687a      	ldr	r2, [r7, #4]
 80004a4:	68b9      	ldr	r1, [r7, #8]
 80004a6:	6978      	ldr	r0, [r7, #20]
 80004a8:	f7ff ff8e 	bl	80003c8 <NVIC_EncodePriority>
 80004ac:	4602      	mov	r2, r0
 80004ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004b2:	4611      	mov	r1, r2
 80004b4:	4618      	mov	r0, r3
 80004b6:	f7ff ff5d 	bl	8000374 <__NVIC_SetPriority>
}
 80004ba:	bf00      	nop
 80004bc:	3718      	adds	r7, #24
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004c2:	b580      	push	{r7, lr}
 80004c4:	b082      	sub	sp, #8
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004ca:	6878      	ldr	r0, [r7, #4]
 80004cc:	f7ff ffb0 	bl	8000430 <SysTick_Config>
 80004d0:	4603      	mov	r3, r0
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
	...

080004dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004dc:	b480      	push	{r7}
 80004de:	b089      	sub	sp, #36	; 0x24
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80004ea:	2300      	movs	r3, #0
 80004ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80004ee:	2300      	movs	r3, #0
 80004f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80004f2:	2300      	movs	r3, #0
 80004f4:	61fb      	str	r3, [r7, #28]
 80004f6:	e159      	b.n	80007ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80004f8:	2201      	movs	r2, #1
 80004fa:	69fb      	ldr	r3, [r7, #28]
 80004fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000500:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	697a      	ldr	r2, [r7, #20]
 8000508:	4013      	ands	r3, r2
 800050a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800050c:	693a      	ldr	r2, [r7, #16]
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	429a      	cmp	r2, r3
 8000512:	f040 8148 	bne.w	80007a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	f003 0303 	and.w	r3, r3, #3
 800051e:	2b01      	cmp	r3, #1
 8000520:	d005      	beq.n	800052e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800052a:	2b02      	cmp	r3, #2
 800052c:	d130      	bne.n	8000590 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	689b      	ldr	r3, [r3, #8]
 8000532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000534:	69fb      	ldr	r3, [r7, #28]
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	2203      	movs	r2, #3
 800053a:	fa02 f303 	lsl.w	r3, r2, r3
 800053e:	43db      	mvns	r3, r3
 8000540:	69ba      	ldr	r2, [r7, #24]
 8000542:	4013      	ands	r3, r2
 8000544:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	68da      	ldr	r2, [r3, #12]
 800054a:	69fb      	ldr	r3, [r7, #28]
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	fa02 f303 	lsl.w	r3, r2, r3
 8000552:	69ba      	ldr	r2, [r7, #24]
 8000554:	4313      	orrs	r3, r2
 8000556:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	69ba      	ldr	r2, [r7, #24]
 800055c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000564:	2201      	movs	r2, #1
 8000566:	69fb      	ldr	r3, [r7, #28]
 8000568:	fa02 f303 	lsl.w	r3, r2, r3
 800056c:	43db      	mvns	r3, r3
 800056e:	69ba      	ldr	r2, [r7, #24]
 8000570:	4013      	ands	r3, r2
 8000572:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	091b      	lsrs	r3, r3, #4
 800057a:	f003 0201 	and.w	r2, r3, #1
 800057e:	69fb      	ldr	r3, [r7, #28]
 8000580:	fa02 f303 	lsl.w	r3, r2, r3
 8000584:	69ba      	ldr	r2, [r7, #24]
 8000586:	4313      	orrs	r3, r2
 8000588:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	69ba      	ldr	r2, [r7, #24]
 800058e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	f003 0303 	and.w	r3, r3, #3
 8000598:	2b03      	cmp	r3, #3
 800059a:	d017      	beq.n	80005cc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005a2:	69fb      	ldr	r3, [r7, #28]
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	2203      	movs	r2, #3
 80005a8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ac:	43db      	mvns	r3, r3
 80005ae:	69ba      	ldr	r2, [r7, #24]
 80005b0:	4013      	ands	r3, r2
 80005b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	689a      	ldr	r2, [r3, #8]
 80005b8:	69fb      	ldr	r3, [r7, #28]
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	fa02 f303 	lsl.w	r3, r2, r3
 80005c0:	69ba      	ldr	r2, [r7, #24]
 80005c2:	4313      	orrs	r3, r2
 80005c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	69ba      	ldr	r2, [r7, #24]
 80005ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	f003 0303 	and.w	r3, r3, #3
 80005d4:	2b02      	cmp	r3, #2
 80005d6:	d123      	bne.n	8000620 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80005d8:	69fb      	ldr	r3, [r7, #28]
 80005da:	08da      	lsrs	r2, r3, #3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3208      	adds	r2, #8
 80005e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	f003 0307 	and.w	r3, r3, #7
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	220f      	movs	r2, #15
 80005f0:	fa02 f303 	lsl.w	r3, r2, r3
 80005f4:	43db      	mvns	r3, r3
 80005f6:	69ba      	ldr	r2, [r7, #24]
 80005f8:	4013      	ands	r3, r2
 80005fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	691a      	ldr	r2, [r3, #16]
 8000600:	69fb      	ldr	r3, [r7, #28]
 8000602:	f003 0307 	and.w	r3, r3, #7
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	fa02 f303 	lsl.w	r3, r2, r3
 800060c:	69ba      	ldr	r2, [r7, #24]
 800060e:	4313      	orrs	r3, r2
 8000610:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	08da      	lsrs	r2, r3, #3
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	3208      	adds	r2, #8
 800061a:	69b9      	ldr	r1, [r7, #24]
 800061c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000626:	69fb      	ldr	r3, [r7, #28]
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	2203      	movs	r2, #3
 800062c:	fa02 f303 	lsl.w	r3, r2, r3
 8000630:	43db      	mvns	r3, r3
 8000632:	69ba      	ldr	r2, [r7, #24]
 8000634:	4013      	ands	r3, r2
 8000636:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	f003 0203 	and.w	r2, r3, #3
 8000640:	69fb      	ldr	r3, [r7, #28]
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	fa02 f303 	lsl.w	r3, r2, r3
 8000648:	69ba      	ldr	r2, [r7, #24]
 800064a:	4313      	orrs	r3, r2
 800064c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	69ba      	ldr	r2, [r7, #24]
 8000652:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065c:	2b00      	cmp	r3, #0
 800065e:	f000 80a2 	beq.w	80007a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	4b56      	ldr	r3, [pc, #344]	; (80007c0 <HAL_GPIO_Init+0x2e4>)
 8000668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066a:	4a55      	ldr	r2, [pc, #340]	; (80007c0 <HAL_GPIO_Init+0x2e4>)
 800066c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000670:	6453      	str	r3, [r2, #68]	; 0x44
 8000672:	4b53      	ldr	r3, [pc, #332]	; (80007c0 <HAL_GPIO_Init+0x2e4>)
 8000674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800067e:	4a51      	ldr	r2, [pc, #324]	; (80007c4 <HAL_GPIO_Init+0x2e8>)
 8000680:	69fb      	ldr	r3, [r7, #28]
 8000682:	089b      	lsrs	r3, r3, #2
 8000684:	3302      	adds	r3, #2
 8000686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800068a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	f003 0303 	and.w	r3, r3, #3
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	220f      	movs	r2, #15
 8000696:	fa02 f303 	lsl.w	r3, r2, r3
 800069a:	43db      	mvns	r3, r3
 800069c:	69ba      	ldr	r2, [r7, #24]
 800069e:	4013      	ands	r3, r2
 80006a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4a48      	ldr	r2, [pc, #288]	; (80007c8 <HAL_GPIO_Init+0x2ec>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d019      	beq.n	80006de <HAL_GPIO_Init+0x202>
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4a47      	ldr	r2, [pc, #284]	; (80007cc <HAL_GPIO_Init+0x2f0>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d013      	beq.n	80006da <HAL_GPIO_Init+0x1fe>
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4a46      	ldr	r2, [pc, #280]	; (80007d0 <HAL_GPIO_Init+0x2f4>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d00d      	beq.n	80006d6 <HAL_GPIO_Init+0x1fa>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4a45      	ldr	r2, [pc, #276]	; (80007d4 <HAL_GPIO_Init+0x2f8>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d007      	beq.n	80006d2 <HAL_GPIO_Init+0x1f6>
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4a44      	ldr	r2, [pc, #272]	; (80007d8 <HAL_GPIO_Init+0x2fc>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d101      	bne.n	80006ce <HAL_GPIO_Init+0x1f2>
 80006ca:	2304      	movs	r3, #4
 80006cc:	e008      	b.n	80006e0 <HAL_GPIO_Init+0x204>
 80006ce:	2307      	movs	r3, #7
 80006d0:	e006      	b.n	80006e0 <HAL_GPIO_Init+0x204>
 80006d2:	2303      	movs	r3, #3
 80006d4:	e004      	b.n	80006e0 <HAL_GPIO_Init+0x204>
 80006d6:	2302      	movs	r3, #2
 80006d8:	e002      	b.n	80006e0 <HAL_GPIO_Init+0x204>
 80006da:	2301      	movs	r3, #1
 80006dc:	e000      	b.n	80006e0 <HAL_GPIO_Init+0x204>
 80006de:	2300      	movs	r3, #0
 80006e0:	69fa      	ldr	r2, [r7, #28]
 80006e2:	f002 0203 	and.w	r2, r2, #3
 80006e6:	0092      	lsls	r2, r2, #2
 80006e8:	4093      	lsls	r3, r2
 80006ea:	69ba      	ldr	r2, [r7, #24]
 80006ec:	4313      	orrs	r3, r2
 80006ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80006f0:	4934      	ldr	r1, [pc, #208]	; (80007c4 <HAL_GPIO_Init+0x2e8>)
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	089b      	lsrs	r3, r3, #2
 80006f6:	3302      	adds	r3, #2
 80006f8:	69ba      	ldr	r2, [r7, #24]
 80006fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006fe:	4b37      	ldr	r3, [pc, #220]	; (80007dc <HAL_GPIO_Init+0x300>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	43db      	mvns	r3, r3
 8000708:	69ba      	ldr	r2, [r7, #24]
 800070a:	4013      	ands	r3, r2
 800070c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d003      	beq.n	8000722 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800071a:	69ba      	ldr	r2, [r7, #24]
 800071c:	693b      	ldr	r3, [r7, #16]
 800071e:	4313      	orrs	r3, r2
 8000720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000722:	4a2e      	ldr	r2, [pc, #184]	; (80007dc <HAL_GPIO_Init+0x300>)
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000728:	4b2c      	ldr	r3, [pc, #176]	; (80007dc <HAL_GPIO_Init+0x300>)
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800072e:	693b      	ldr	r3, [r7, #16]
 8000730:	43db      	mvns	r3, r3
 8000732:	69ba      	ldr	r2, [r7, #24]
 8000734:	4013      	ands	r3, r2
 8000736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000740:	2b00      	cmp	r3, #0
 8000742:	d003      	beq.n	800074c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000744:	69ba      	ldr	r2, [r7, #24]
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	4313      	orrs	r3, r2
 800074a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800074c:	4a23      	ldr	r2, [pc, #140]	; (80007dc <HAL_GPIO_Init+0x300>)
 800074e:	69bb      	ldr	r3, [r7, #24]
 8000750:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000752:	4b22      	ldr	r3, [pc, #136]	; (80007dc <HAL_GPIO_Init+0x300>)
 8000754:	689b      	ldr	r3, [r3, #8]
 8000756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	43db      	mvns	r3, r3
 800075c:	69ba      	ldr	r2, [r7, #24]
 800075e:	4013      	ands	r3, r2
 8000760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800076a:	2b00      	cmp	r3, #0
 800076c:	d003      	beq.n	8000776 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800076e:	69ba      	ldr	r2, [r7, #24]
 8000770:	693b      	ldr	r3, [r7, #16]
 8000772:	4313      	orrs	r3, r2
 8000774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000776:	4a19      	ldr	r2, [pc, #100]	; (80007dc <HAL_GPIO_Init+0x300>)
 8000778:	69bb      	ldr	r3, [r7, #24]
 800077a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800077c:	4b17      	ldr	r3, [pc, #92]	; (80007dc <HAL_GPIO_Init+0x300>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	43db      	mvns	r3, r3
 8000786:	69ba      	ldr	r2, [r7, #24]
 8000788:	4013      	ands	r3, r2
 800078a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000794:	2b00      	cmp	r3, #0
 8000796:	d003      	beq.n	80007a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000798:	69ba      	ldr	r2, [r7, #24]
 800079a:	693b      	ldr	r3, [r7, #16]
 800079c:	4313      	orrs	r3, r2
 800079e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80007a0:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <HAL_GPIO_Init+0x300>)
 80007a2:	69bb      	ldr	r3, [r7, #24]
 80007a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	3301      	adds	r3, #1
 80007aa:	61fb      	str	r3, [r7, #28]
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	2b0f      	cmp	r3, #15
 80007b0:	f67f aea2 	bls.w	80004f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80007b4:	bf00      	nop
 80007b6:	3724      	adds	r7, #36	; 0x24
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40013800 	.word	0x40013800
 80007c8:	40020000 	.word	0x40020000
 80007cc:	40020400 	.word	0x40020400
 80007d0:	40020800 	.word	0x40020800
 80007d4:	40020c00 	.word	0x40020c00
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40013c00 	.word	0x40013c00

080007e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	807b      	strh	r3, [r7, #2]
 80007ec:	4613      	mov	r3, r2
 80007ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007f0:	787b      	ldrb	r3, [r7, #1]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d003      	beq.n	80007fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80007f6:	887a      	ldrh	r2, [r7, #2]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80007fc:	e003      	b.n	8000806 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007fe:	887b      	ldrh	r3, [r7, #2]
 8000800:	041a      	lsls	r2, r3, #16
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	619a      	str	r2, [r3, #24]
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <main>:
#include "main.h"

int main(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	/* Initialize all required modules */
	HAL_Init();
 8000818:	f7ff fcde 	bl	80001d8 <HAL_Init>
	//CommsN64Console_Init();
	Main_Init();
 800081c:	f000 f828 	bl	8000870 <Main_Init>

	/* Main application loop */
    while(1)
    {
    	Main_SetBlueLed(BLUE_LED_ON);
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <main+0x30>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	4618      	mov	r0, r3
 8000826:	f000 f811 	bl	800084c <Main_SetBlueLed>
    	HAL_Delay(100);
 800082a:	2064      	movs	r0, #100	; 0x64
 800082c:	f7ff fd4e 	bl	80002cc <HAL_Delay>
    	Main_SetBlueLed(BLUE_LED_OFF);
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <main+0x34>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	4618      	mov	r0, r3
 8000836:	f000 f809 	bl	800084c <Main_SetBlueLed>
    	HAL_Delay(100);
 800083a:	2064      	movs	r0, #100	; 0x64
 800083c:	f7ff fd46 	bl	80002cc <HAL_Delay>
    	Main_SetBlueLed(BLUE_LED_ON);
 8000840:	e7ee      	b.n	8000820 <main+0xc>
 8000842:	bf00      	nop
 8000844:	20000028 	.word	0x20000028
 8000848:	20000005 	.word	0x20000005

0800084c <Main_SetBlueLed>:
    }
}

// Setters
void Main_SetBlueLed(GPIO_PinState pinState)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN_HAL, pinState);
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	461a      	mov	r2, r3
 800085a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800085e:	4803      	ldr	r0, [pc, #12]	; (800086c <Main_SetBlueLed+0x20>)
 8000860:	f7ff ffbe 	bl	80007e0 <HAL_GPIO_WritePin>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40020800 	.word	0x40020800

08000870 <Main_Init>:

// Initializer
void Main_Init()
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
	/* Initialize the blue led */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <Main_Init+0x54>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a11      	ldr	r2, [pc, #68]	; (80008c4 <Main_Init+0x54>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <Main_Init+0x54>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef GPIO_InitStruct_Main = {0};
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct_Main.Pin = BLUE_LED_PIN_HAL;
 80008a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct_Main.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct_Main.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct_Main.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(BLUE_LED_PORT, &GPIO_InitStruct_Main);
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	4619      	mov	r1, r3
 80008b6:	4804      	ldr	r0, [pc, #16]	; (80008c8 <Main_Init+0x58>)
 80008b8:	f7ff fe10 	bl	80004dc <HAL_GPIO_Init>
}
 80008bc:	bf00      	nop
 80008be:	3718      	adds	r7, #24
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020800 	.word	0x40020800

080008cc <SysTick_Handler>:

// Misc
void SysTick_Handler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80008d0:	f7ff fcdc 	bl	800028c <HAL_IncTick>
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008d8:	480d      	ldr	r0, [pc, #52]	; (8000910 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008da:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e0:	480c      	ldr	r0, [pc, #48]	; (8000914 <LoopForever+0x6>)
  ldr r1, =_edata
 80008e2:	490d      	ldr	r1, [pc, #52]	; (8000918 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e4:	4a0d      	ldr	r2, [pc, #52]	; (800091c <LoopForever+0xe>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e8:	e002      	b.n	80008f0 <LoopCopyDataInit>

080008ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ee:	3304      	adds	r3, #4

080008f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f4:	d3f9      	bcc.n	80008ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f6:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f8:	4c0a      	ldr	r4, [pc, #40]	; (8000924 <LoopForever+0x16>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008fc:	e001      	b.n	8000902 <LoopFillZerobss>

080008fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000900:	3204      	adds	r2, #4

08000902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000904:	d3fb      	bcc.n	80008fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000906:	f000 f811 	bl	800092c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800090a:	f7ff ff83 	bl	8000814 <main>

0800090e <LoopForever>:

LoopForever:
    b LoopForever
 800090e:	e7fe      	b.n	800090e <LoopForever>
  ldr   r0, =_estack
 8000910:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000918:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800091c:	08000994 	.word	0x08000994
  ldr r2, =_sbss
 8000920:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000924:	20000030 	.word	0x20000030

08000928 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000928:	e7fe      	b.n	8000928 <ADC_IRQHandler>
	...

0800092c <__libc_init_array>:
 800092c:	b570      	push	{r4, r5, r6, lr}
 800092e:	4e0d      	ldr	r6, [pc, #52]	; (8000964 <__libc_init_array+0x38>)
 8000930:	4c0d      	ldr	r4, [pc, #52]	; (8000968 <__libc_init_array+0x3c>)
 8000932:	1ba4      	subs	r4, r4, r6
 8000934:	10a4      	asrs	r4, r4, #2
 8000936:	2500      	movs	r5, #0
 8000938:	42a5      	cmp	r5, r4
 800093a:	d109      	bne.n	8000950 <__libc_init_array+0x24>
 800093c:	4e0b      	ldr	r6, [pc, #44]	; (800096c <__libc_init_array+0x40>)
 800093e:	4c0c      	ldr	r4, [pc, #48]	; (8000970 <__libc_init_array+0x44>)
 8000940:	f000 f818 	bl	8000974 <_init>
 8000944:	1ba4      	subs	r4, r4, r6
 8000946:	10a4      	asrs	r4, r4, #2
 8000948:	2500      	movs	r5, #0
 800094a:	42a5      	cmp	r5, r4
 800094c:	d105      	bne.n	800095a <__libc_init_array+0x2e>
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000954:	4798      	blx	r3
 8000956:	3501      	adds	r5, #1
 8000958:	e7ee      	b.n	8000938 <__libc_init_array+0xc>
 800095a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800095e:	4798      	blx	r3
 8000960:	3501      	adds	r5, #1
 8000962:	e7f2      	b.n	800094a <__libc_init_array+0x1e>
 8000964:	0800098c 	.word	0x0800098c
 8000968:	0800098c 	.word	0x0800098c
 800096c:	0800098c 	.word	0x0800098c
 8000970:	08000990 	.word	0x08000990

08000974 <_init>:
 8000974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000976:	bf00      	nop
 8000978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800097a:	bc08      	pop	{r3}
 800097c:	469e      	mov	lr, r3
 800097e:	4770      	bx	lr

08000980 <_fini>:
 8000980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000982:	bf00      	nop
 8000984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000986:	bc08      	pop	{r3}
 8000988:	469e      	mov	lr, r3
 800098a:	4770      	bx	lr
