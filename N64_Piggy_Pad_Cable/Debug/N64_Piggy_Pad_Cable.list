
N64_Piggy_Pad_Cable.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001120  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080012b8  080012b8  000112b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012c0  080012c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080012c0  080012c0  000112c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080012c8  080012c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012c8  080012c8  000112c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080012cc  080012cc  000112cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080012d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  080012dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  080012dc  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005fd8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000011ac  00000000  00000000  00026014  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002e52  00000000  00000000  000271c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000528  00000000  00000000  0002a018  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000510  00000000  00000000  0002a540  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000e92  00000000  00000000  0002aa50  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000051d7  00000000  00000000  0002b8e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00082c03  00000000  00000000  00030ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000b36bc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d00  00000000  00000000  000b3738  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080012a0 	.word	0x080012a0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080012a0 	.word	0x080012a0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80004d8:	4770      	bx	lr
	...

080004dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004dc:	b510      	push	{r4, lr}
 80004de:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e0:	4b0e      	ldr	r3, [pc, #56]	; (800051c <HAL_InitTick+0x40>)
 80004e2:	7818      	ldrb	r0, [r3, #0]
 80004e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e8:	fbb3 f3f0 	udiv	r3, r3, r0
 80004ec:	4a0c      	ldr	r2, [pc, #48]	; (8000520 <HAL_InitTick+0x44>)
 80004ee:	6810      	ldr	r0, [r2, #0]
 80004f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f4:	f000 f89c 	bl	8000630 <HAL_SYSTICK_Config>
 80004f8:	b968      	cbnz	r0, 8000516 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004fa:	2c0f      	cmp	r4, #15
 80004fc:	d901      	bls.n	8000502 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80004fe:	2001      	movs	r0, #1
 8000500:	e00a      	b.n	8000518 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000502:	2200      	movs	r2, #0
 8000504:	4621      	mov	r1, r4
 8000506:	f04f 30ff 	mov.w	r0, #4294967295
 800050a:	f000 f85f 	bl	80005cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800050e:	4b05      	ldr	r3, [pc, #20]	; (8000524 <HAL_InitTick+0x48>)
 8000510:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000512:	2000      	movs	r0, #0
 8000514:	e000      	b.n	8000518 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000516:	2001      	movs	r0, #1
}
 8000518:	bd10      	pop	{r4, pc}
 800051a:	bf00      	nop
 800051c:	20000000 	.word	0x20000000
 8000520:	20000008 	.word	0x20000008
 8000524:	20000004 	.word	0x20000004

08000528 <HAL_Init>:
{
 8000528:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800052a:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <HAL_Init+0x30>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000532:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800053a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000542:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000544:	2003      	movs	r0, #3
 8000546:	f000 f82f 	bl	80005a8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800054a:	200f      	movs	r0, #15
 800054c:	f7ff ffc6 	bl	80004dc <HAL_InitTick>
  HAL_MspInit();
 8000550:	f7ff ffc2 	bl	80004d8 <HAL_MspInit>
}
 8000554:	2000      	movs	r0, #0
 8000556:	bd08      	pop	{r3, pc}
 8000558:	40023c00 	.word	0x40023c00

0800055c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800055c:	4a03      	ldr	r2, [pc, #12]	; (800056c <HAL_IncTick+0x10>)
 800055e:	6811      	ldr	r1, [r2, #0]
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <HAL_IncTick+0x14>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	440b      	add	r3, r1
 8000566:	6013      	str	r3, [r2, #0]
}
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	20000080 	.word	0x20000080
 8000570:	20000000 	.word	0x20000000

08000574 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000574:	4b01      	ldr	r3, [pc, #4]	; (800057c <HAL_GetTick+0x8>)
 8000576:	6818      	ldr	r0, [r3, #0]
}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20000080 	.word	0x20000080

08000580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000580:	b538      	push	{r3, r4, r5, lr}
 8000582:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000584:	f7ff fff6 	bl	8000574 <HAL_GetTick>
 8000588:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800058a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800058e:	d002      	beq.n	8000596 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000590:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <HAL_Delay+0x24>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000596:	f7ff ffed 	bl	8000574 <HAL_GetTick>
 800059a:	1b40      	subs	r0, r0, r5
 800059c:	42a0      	cmp	r0, r4
 800059e:	d3fa      	bcc.n	8000596 <HAL_Delay+0x16>
  {
  }
}
 80005a0:	bd38      	pop	{r3, r4, r5, pc}
 80005a2:	bf00      	nop
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a8:	4a07      	ldr	r2, [pc, #28]	; (80005c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005aa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005b0:	041b      	lsls	r3, r3, #16
 80005b2:	0c1b      	lsrs	r3, r3, #16
 80005b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005bc:	0200      	lsls	r0, r0, #8
 80005be:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005c2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005c4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80005c6:	4770      	bx	lr
 80005c8:	e000ed00 	.word	0xe000ed00

080005cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005cc:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005ce:	4b16      	ldr	r3, [pc, #88]	; (8000628 <HAL_NVIC_SetPriority+0x5c>)
 80005d0:	68db      	ldr	r3, [r3, #12]
 80005d2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d6:	f1c3 0407 	rsb	r4, r3, #7
 80005da:	2c04      	cmp	r4, #4
 80005dc:	bf28      	it	cs
 80005de:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e0:	1d1d      	adds	r5, r3, #4
 80005e2:	2d06      	cmp	r5, #6
 80005e4:	bf8c      	ite	hi
 80005e6:	3b03      	subhi	r3, #3
 80005e8:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ea:	f04f 35ff 	mov.w	r5, #4294967295
 80005ee:	fa05 f404 	lsl.w	r4, r5, r4
 80005f2:	ea21 0104 	bic.w	r1, r1, r4
 80005f6:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005f8:	fa05 f303 	lsl.w	r3, r5, r3
 80005fc:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000600:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000602:	2800      	cmp	r0, #0
 8000604:	db09      	blt.n	800061a <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000606:	0109      	lsls	r1, r1, #4
 8000608:	b2c9      	uxtb	r1, r1
 800060a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800060e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000612:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000616:	bc30      	pop	{r4, r5}
 8000618:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	f000 000f 	and.w	r0, r0, #15
 800061e:	0109      	lsls	r1, r1, #4
 8000620:	b2c9      	uxtb	r1, r1
 8000622:	4b02      	ldr	r3, [pc, #8]	; (800062c <HAL_NVIC_SetPriority+0x60>)
 8000624:	5419      	strb	r1, [r3, r0]
 8000626:	e7f6      	b.n	8000616 <HAL_NVIC_SetPriority+0x4a>
 8000628:	e000ed00 	.word	0xe000ed00
 800062c:	e000ed14 	.word	0xe000ed14

08000630 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000630:	3801      	subs	r0, #1
 8000632:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000636:	d20a      	bcs.n	800064e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_SYSTICK_Config+0x24>)
 800063a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063c:	4a06      	ldr	r2, [pc, #24]	; (8000658 <HAL_SYSTICK_Config+0x28>)
 800063e:	21f0      	movs	r1, #240	; 0xf0
 8000640:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000644:	2000      	movs	r0, #0
 8000646:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000648:	2207      	movs	r2, #7
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800064e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	e000e010 	.word	0xe000e010
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800065c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000660:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000662:	2400      	movs	r4, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000664:	2601      	movs	r6, #1
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000666:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 8000830 <HAL_GPIO_Init+0x1d4>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800066a:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 8000834 <HAL_GPIO_Init+0x1d8>
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800066e:	4d6e      	ldr	r5, [pc, #440]	; (8000828 <HAL_GPIO_Init+0x1cc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000670:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8000838 <HAL_GPIO_Init+0x1dc>
 8000674:	e04a      	b.n	800070c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000676:	6882      	ldr	r2, [r0, #8]
 8000678:	ea4f 0b44 	mov.w	fp, r4, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800067c:	2703      	movs	r7, #3
 800067e:	fa07 fa0b 	lsl.w	sl, r7, fp
 8000682:	ea22 0a0a 	bic.w	sl, r2, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000686:	68ca      	ldr	r2, [r1, #12]
 8000688:	fa02 f20b 	lsl.w	r2, r2, fp
 800068c:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->OSPEEDR = temp;
 8000690:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8000692:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000694:	ea22 0808 	bic.w	r8, r2, r8
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000698:	684a      	ldr	r2, [r1, #4]
 800069a:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800069e:	40a2      	lsls	r2, r4
 80006a0:	ea42 0208 	orr.w	r2, r2, r8
        GPIOx->OTYPER = temp;
 80006a4:	6042      	str	r2, [r0, #4]
 80006a6:	e03e      	b.n	8000726 <HAL_GPIO_Init+0xca>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006a8:	f04f 0800 	mov.w	r8, #0
 80006ac:	fa08 f80b 	lsl.w	r8, r8, fp
 80006b0:	ea48 080a 	orr.w	r8, r8, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 80006b4:	f8c2 8008 	str.w	r8, [r2, #8]
        temp = EXTI->IMR;
 80006b8:	682a      	ldr	r2, [r5, #0]
        temp &= ~((uint32_t)iocurrent);
 80006ba:	ea6f 0803 	mvn.w	r8, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006be:	684f      	ldr	r7, [r1, #4]
 80006c0:	f417 3f80 	tst.w	r7, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80006c4:	bf0c      	ite	eq
 80006c6:	ea08 0202 	andeq.w	r2, r8, r2
        {
          temp |= iocurrent;
 80006ca:	431a      	orrne	r2, r3
        }
        EXTI->IMR = temp;
 80006cc:	602a      	str	r2, [r5, #0]

        temp = EXTI->EMR;
 80006ce:	686a      	ldr	r2, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006d0:	684f      	ldr	r7, [r1, #4]
 80006d2:	f417 3f00 	tst.w	r7, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80006d6:	bf0c      	ite	eq
 80006d8:	ea08 0202 	andeq.w	r2, r8, r2
        {
          temp |= iocurrent;
 80006dc:	431a      	orrne	r2, r3
        }
        EXTI->EMR = temp;
 80006de:	606a      	str	r2, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006e0:	68aa      	ldr	r2, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006e2:	684f      	ldr	r7, [r1, #4]
 80006e4:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80006e8:	bf0c      	ite	eq
 80006ea:	ea08 0202 	andeq.w	r2, r8, r2
        {
          temp |= iocurrent;
 80006ee:	431a      	orrne	r2, r3
        }
        EXTI->RTSR = temp;
 80006f0:	60aa      	str	r2, [r5, #8]

        temp = EXTI->FTSR;
 80006f2:	68ea      	ldr	r2, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006f4:	684f      	ldr	r7, [r1, #4]
 80006f6:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 80006fa:	bf0c      	ite	eq
 80006fc:	ea08 0302 	andeq.w	r3, r8, r2
        {
          temp |= iocurrent;
 8000700:	4313      	orrne	r3, r2
        }
        EXTI->FTSR = temp;
 8000702:	60eb      	str	r3, [r5, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000704:	3401      	adds	r4, #1
 8000706:	2c10      	cmp	r4, #16
 8000708:	f000 808a 	beq.w	8000820 <HAL_GPIO_Init+0x1c4>
    ioposition = 0x01U << position;
 800070c:	fa06 f804 	lsl.w	r8, r6, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000710:	680b      	ldr	r3, [r1, #0]
 8000712:	ea08 0303 	and.w	r3, r8, r3
    if(iocurrent == ioposition)
 8000716:	4598      	cmp	r8, r3
 8000718:	d1f4      	bne.n	8000704 <HAL_GPIO_Init+0xa8>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800071a:	684a      	ldr	r2, [r1, #4]
 800071c:	f002 0203 	and.w	r2, r2, #3
 8000720:	3a01      	subs	r2, #1
 8000722:	2a01      	cmp	r2, #1
 8000724:	d9a7      	bls.n	8000676 <HAL_GPIO_Init+0x1a>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000726:	684a      	ldr	r2, [r1, #4]
 8000728:	f002 0203 	and.w	r2, r2, #3
 800072c:	2a03      	cmp	r2, #3
 800072e:	d027      	beq.n	8000780 <HAL_GPIO_Init+0x124>
        temp = GPIOx->PUPDR;
 8000730:	68c2      	ldr	r2, [r0, #12]
 8000732:	ea4f 0a44 	mov.w	sl, r4, lsl #1
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000736:	2703      	movs	r7, #3
 8000738:	fa07 f80a 	lsl.w	r8, r7, sl
 800073c:	ea22 0808 	bic.w	r8, r2, r8
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000740:	688a      	ldr	r2, [r1, #8]
 8000742:	fa02 f20a 	lsl.w	r2, r2, sl
 8000746:	ea42 0208 	orr.w	r2, r2, r8
        GPIOx->PUPDR = temp;
 800074a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800074c:	684a      	ldr	r2, [r1, #4]
 800074e:	403a      	ands	r2, r7
 8000750:	2a02      	cmp	r2, #2
 8000752:	d115      	bne.n	8000780 <HAL_GPIO_Init+0x124>
        temp = GPIOx->AFR[position >> 3U];
 8000754:	fa24 f807 	lsr.w	r8, r4, r7
 8000758:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800075c:	f8d8 a020 	ldr.w	sl, [r8, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000760:	f004 0207 	and.w	r2, r4, #7
 8000764:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8000768:	220f      	movs	r2, #15
 800076a:	fa02 f20b 	lsl.w	r2, r2, fp
 800076e:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000772:	690a      	ldr	r2, [r1, #16]
 8000774:	fa02 f20b 	lsl.w	r2, r2, fp
 8000778:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->AFR[position >> 3U] = temp;
 800077c:	f8c8 2020 	str.w	r2, [r8, #32]
      temp = GPIOx->MODER;
 8000780:	6802      	ldr	r2, [r0, #0]
 8000782:	ea4f 0a44 	mov.w	sl, r4, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000786:	2703      	movs	r7, #3
 8000788:	fa07 f80a 	lsl.w	r8, r7, sl
 800078c:	ea22 0808 	bic.w	r8, r2, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000790:	684a      	ldr	r2, [r1, #4]
 8000792:	403a      	ands	r2, r7
 8000794:	fa02 f20a 	lsl.w	r2, r2, sl
 8000798:	ea42 0208 	orr.w	r2, r2, r8
      GPIOx->MODER = temp;
 800079c:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800079e:	684a      	ldr	r2, [r1, #4]
 80007a0:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80007a4:	d0ae      	beq.n	8000704 <HAL_GPIO_Init+0xa8>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a6:	2200      	movs	r2, #0
 80007a8:	9201      	str	r2, [sp, #4]
 80007aa:	f8dc 2044 	ldr.w	r2, [ip, #68]	; 0x44
 80007ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80007b2:	f8cc 2044 	str.w	r2, [ip, #68]	; 0x44
 80007b6:	f8dc 2044 	ldr.w	r2, [ip, #68]	; 0x44
 80007ba:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80007be:	9201      	str	r2, [sp, #4]
 80007c0:	9a01      	ldr	r2, [sp, #4]
 80007c2:	f024 0203 	bic.w	r2, r4, #3
 80007c6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80007ca:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
        temp = SYSCFG->EXTICR[position >> 2U];
 80007ce:	f8d2 a008 	ldr.w	sl, [r2, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007d2:	ea04 0807 	and.w	r8, r4, r7
 80007d6:	ea4f 0b88 	mov.w	fp, r8, lsl #2
 80007da:	f04f 080f 	mov.w	r8, #15
 80007de:	fa08 f80b 	lsl.w	r8, r8, fp
 80007e2:	ea2a 0a08 	bic.w	sl, sl, r8
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007e6:	4570      	cmp	r0, lr
 80007e8:	f43f af5e 	beq.w	80006a8 <HAL_GPIO_Init+0x4c>
 80007ec:	4548      	cmp	r0, r9
 80007ee:	d00f      	beq.n	8000810 <HAL_GPIO_Init+0x1b4>
 80007f0:	4f0e      	ldr	r7, [pc, #56]	; (800082c <HAL_GPIO_Init+0x1d0>)
 80007f2:	42b8      	cmp	r0, r7
 80007f4:	d00e      	beq.n	8000814 <HAL_GPIO_Init+0x1b8>
 80007f6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80007fa:	42b8      	cmp	r0, r7
 80007fc:	d00d      	beq.n	800081a <HAL_GPIO_Init+0x1be>
 80007fe:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000802:	42b8      	cmp	r0, r7
 8000804:	bf0c      	ite	eq
 8000806:	f04f 0804 	moveq.w	r8, #4
 800080a:	f04f 0807 	movne.w	r8, #7
 800080e:	e74d      	b.n	80006ac <HAL_GPIO_Init+0x50>
 8000810:	46b0      	mov	r8, r6
 8000812:	e74b      	b.n	80006ac <HAL_GPIO_Init+0x50>
 8000814:	f04f 0802 	mov.w	r8, #2
 8000818:	e748      	b.n	80006ac <HAL_GPIO_Init+0x50>
 800081a:	f04f 0803 	mov.w	r8, #3
 800081e:	e745      	b.n	80006ac <HAL_GPIO_Init+0x50>
      }
    }
  }
}
 8000820:	b003      	add	sp, #12
 8000822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000826:	bf00      	nop
 8000828:	40013c00 	.word	0x40013c00
 800082c:	40020800 	.word	0x40020800
 8000830:	40023800 	.word	0x40023800
 8000834:	40020000 	.word	0x40020000
 8000838:	40020400 	.word	0x40020400

0800083c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800083c:	b912      	cbnz	r2, 8000844 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800083e:	0409      	lsls	r1, r1, #16
 8000840:	6181      	str	r1, [r0, #24]
  }
}
 8000842:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000844:	6181      	str	r1, [r0, #24]
 8000846:	4770      	bx	lr

08000848 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8000848:	b570      	push	{r4, r5, r6, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	460e      	mov	r6, r1
 800084e:	4615      	mov	r5, r2
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8000850:	b308      	cbz	r0, 8000896 <HAL_RCC_MCOConfig+0x4e>
  else
  {
    assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));

    /* MCO2 Clock Enable */
    __MCO2_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	9302      	str	r3, [sp, #8]
 8000856:	4c20      	ldr	r4, [pc, #128]	; (80008d8 <HAL_RCC_MCOConfig+0x90>)
 8000858:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800085a:	f042 0204 	orr.w	r2, r2, #4
 800085e:	6322      	str	r2, [r4, #48]	; 0x30
 8000860:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000862:	f002 0204 	and.w	r2, r2, #4
 8000866:	9202      	str	r2, [sp, #8]
 8000868:	9a02      	ldr	r2, [sp, #8]

    /* Configure the MCO2 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO2_PIN;
 800086a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800086e:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2202      	movs	r2, #2
 8000872:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000874:	2203      	movs	r2, #3
 8000876:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800087a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800087c:	a903      	add	r1, sp, #12
 800087e:	4817      	ldr	r0, [pc, #92]	; (80008dc <HAL_RCC_MCOConfig+0x94>)
 8000880:	f7ff feec 	bl	800065c <HAL_GPIO_Init>

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8000884:	68a2      	ldr	r2, [r4, #8]
 8000886:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 800088a:	4332      	orrs	r2, r6
 800088c:	ea42 02c5 	orr.w	r2, r2, r5, lsl #3
 8000890:	60a2      	str	r2, [r4, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8000892:	b008      	add	sp, #32
 8000894:	bd70      	pop	{r4, r5, r6, pc}
    __MCO1_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	9301      	str	r3, [sp, #4]
 800089a:	4c0f      	ldr	r4, [pc, #60]	; (80008d8 <HAL_RCC_MCOConfig+0x90>)
 800089c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800089e:	f042 0201 	orr.w	r2, r2, #1
 80008a2:	6322      	str	r2, [r4, #48]	; 0x30
 80008a4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80008a6:	f002 0201 	and.w	r2, r2, #1
 80008aa:	9201      	str	r2, [sp, #4]
 80008ac:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pin = MCO1_PIN;
 80008ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008b2:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b4:	2202      	movs	r2, #2
 80008b6:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b8:	2203      	movs	r2, #3
 80008ba:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80008be:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80008c0:	a903      	add	r1, sp, #12
 80008c2:	4807      	ldr	r0, [pc, #28]	; (80008e0 <HAL_RCC_MCOConfig+0x98>)
 80008c4:	f7ff feca 	bl	800065c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80008c8:	68a2      	ldr	r2, [r4, #8]
 80008ca:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000
 80008ce:	4332      	orrs	r2, r6
 80008d0:	432a      	orrs	r2, r5
 80008d2:	60a2      	str	r2, [r4, #8]
 80008d4:	e7dd      	b.n	8000892 <HAL_RCC_MCOConfig+0x4a>
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020800 	.word	0x40020800
 80008e0:	40020000 	.word	0x40020000

080008e4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80008e4:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80008ec:	4a03      	ldr	r2, [pc, #12]	; (80008fc <HAL_RCC_GetPCLK1Freq+0x18>)
 80008ee:	5cd3      	ldrb	r3, [r2, r3]
 80008f0:	4a03      	ldr	r2, [pc, #12]	; (8000900 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80008f2:	6810      	ldr	r0, [r2, #0]
}
 80008f4:	40d8      	lsrs	r0, r3
 80008f6:	4770      	bx	lr
 80008f8:	40023800 	.word	0x40023800
 80008fc:	080012b8 	.word	0x080012b8
 8000900:	20000008 	.word	0x20000008

08000904 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000904:	4b04      	ldr	r3, [pc, #16]	; (8000918 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800090c:	4a03      	ldr	r2, [pc, #12]	; (800091c <HAL_RCC_GetPCLK2Freq+0x18>)
 800090e:	5cd3      	ldrb	r3, [r2, r3]
 8000910:	4a03      	ldr	r2, [pc, #12]	; (8000920 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000912:	6810      	ldr	r0, [r2, #0]
}
 8000914:	40d8      	lsrs	r0, r3
 8000916:	4770      	bx	lr
 8000918:	40023800 	.word	0x40023800
 800091c:	080012b8 	.word	0x080012b8
 8000920:	20000008 	.word	0x20000008

08000924 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000924:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8000928:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800092a:	6802      	ldr	r2, [r0, #0]
 800092c:	6913      	ldr	r3, [r2, #16]
 800092e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000932:	68c1      	ldr	r1, [r0, #12]
 8000934:	430b      	orrs	r3, r1
 8000936:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8000938:	6801      	ldr	r1, [r0, #0]
 800093a:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800093c:	6883      	ldr	r3, [r0, #8]
 800093e:	6900      	ldr	r0, [r0, #16]
 8000940:	4303      	orrs	r3, r0
 8000942:	6960      	ldr	r0, [r4, #20]
 8000944:	4303      	orrs	r3, r0
 8000946:	69e0      	ldr	r0, [r4, #28]
 8000948:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800094a:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 800094e:	f022 020c 	bic.w	r2, r2, #12
 8000952:	4313      	orrs	r3, r2
 8000954:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000956:	6822      	ldr	r2, [r4, #0]
 8000958:	6953      	ldr	r3, [r2, #20]
 800095a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800095e:	69a1      	ldr	r1, [r4, #24]
 8000960:	430b      	orrs	r3, r1
 8000962:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000964:	6823      	ldr	r3, [r4, #0]
 8000966:	4a38      	ldr	r2, [pc, #224]	; (8000a48 <UART_SetConfig+0x124>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d006      	beq.n	800097a <UART_SetConfig+0x56>
 800096c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000970:	4293      	cmp	r3, r2
 8000972:	d002      	beq.n	800097a <UART_SetConfig+0x56>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8000974:	f7ff ffb6 	bl	80008e4 <HAL_RCC_GetPCLK1Freq>
 8000978:	e001      	b.n	800097e <UART_SetConfig+0x5a>
      pclk = HAL_RCC_GetPCLK2Freq();
 800097a:	f7ff ffc3 	bl	8000904 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800097e:	69e3      	ldr	r3, [r4, #28]
 8000980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000984:	d02c      	beq.n	80009e0 <UART_SetConfig+0xbc>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000986:	f04f 0900 	mov.w	r9, #0
 800098a:	1806      	adds	r6, r0, r0
 800098c:	eb49 0709 	adc.w	r7, r9, r9
 8000990:	eb16 0b00 	adds.w	fp, r6, r0
 8000994:	eb47 0c09 	adc.w	ip, r7, r9
 8000998:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 800099c:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 80009a0:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 80009a4:	4693      	mov	fp, r2
 80009a6:	469c      	mov	ip, r3
 80009a8:	6863      	ldr	r3, [r4, #4]
 80009aa:	009a      	lsls	r2, r3, #2
 80009ac:	0f9b      	lsrs	r3, r3, #30
 80009ae:	eb10 000b 	adds.w	r0, r0, fp
 80009b2:	eb49 010c 	adc.w	r1, r9, ip
 80009b6:	f7ff fc0f 	bl	80001d8 <__aeabi_uldivmod>
 80009ba:	6824      	ldr	r4, [r4, #0]
 80009bc:	4923      	ldr	r1, [pc, #140]	; (8000a4c <UART_SetConfig+0x128>)
 80009be:	fba1 3200 	umull	r3, r2, r1, r0
 80009c2:	0952      	lsrs	r2, r2, #5
 80009c4:	2364      	movs	r3, #100	; 0x64
 80009c6:	fb03 0312 	mls	r3, r3, r2, r0
 80009ca:	011b      	lsls	r3, r3, #4
 80009cc:	3332      	adds	r3, #50	; 0x32
 80009ce:	fba1 1303 	umull	r1, r3, r1, r3
 80009d2:	f3c3 1347 	ubfx	r3, r3, #5, #8
 80009d6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80009da:	60a3      	str	r3, [r4, #8]
  }
}
 80009dc:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80009e0:	4683      	mov	fp, r0
 80009e2:	f04f 0c00 	mov.w	ip, #0
 80009e6:	1806      	adds	r6, r0, r0
 80009e8:	eb4c 070c 	adc.w	r7, ip, ip
 80009ec:	eb16 0800 	adds.w	r8, r6, r0
 80009f0:	eb47 090c 	adc.w	r9, r7, ip
 80009f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80009f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80009fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000a00:	4690      	mov	r8, r2
 8000a02:	4699      	mov	r9, r3
 8000a04:	6862      	ldr	r2, [r4, #4]
 8000a06:	2100      	movs	r1, #0
 8000a08:	1892      	adds	r2, r2, r2
 8000a0a:	eb41 0301 	adc.w	r3, r1, r1
 8000a0e:	eb1b 0008 	adds.w	r0, fp, r8
 8000a12:	eb4c 0109 	adc.w	r1, ip, r9
 8000a16:	f7ff fbdf 	bl	80001d8 <__aeabi_uldivmod>
 8000a1a:	4d0c      	ldr	r5, [pc, #48]	; (8000a4c <UART_SetConfig+0x128>)
 8000a1c:	fba5 3200 	umull	r3, r2, r5, r0
 8000a20:	0951      	lsrs	r1, r2, #5
 8000a22:	2364      	movs	r3, #100	; 0x64
 8000a24:	fb03 0311 	mls	r3, r3, r1, r0
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	3332      	adds	r3, #50	; 0x32
 8000a2c:	fba5 2303 	umull	r2, r3, r5, r3
 8000a30:	095b      	lsrs	r3, r3, #5
 8000a32:	6820      	ldr	r0, [r4, #0]
 8000a34:	f003 0207 	and.w	r2, r3, #7
 8000a38:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000a42:	4413      	add	r3, r2
 8000a44:	6083      	str	r3, [r0, #8]
 8000a46:	e7c9      	b.n	80009dc <UART_SetConfig+0xb8>
 8000a48:	40011000 	.word	0x40011000
 8000a4c:	51eb851f 	.word	0x51eb851f

08000a50 <HAL_UART_MspInit>:
}
 8000a50:	4770      	bx	lr

08000a52 <HAL_UART_Init>:
  if (huart == NULL)
 8000a52:	b358      	cbz	r0, 8000aac <HAL_UART_Init+0x5a>
{
 8000a54:	b510      	push	{r4, lr}
 8000a56:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8000a58:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000a5c:	b30b      	cbz	r3, 8000aa2 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8000a5e:	2324      	movs	r3, #36	; 0x24
 8000a60:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8000a64:	6822      	ldr	r2, [r4, #0]
 8000a66:	68d3      	ldr	r3, [r2, #12]
 8000a68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a6c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000a6e:	4620      	mov	r0, r4
 8000a70:	f7ff ff58 	bl	8000924 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000a74:	6822      	ldr	r2, [r4, #0]
 8000a76:	6913      	ldr	r3, [r2, #16]
 8000a78:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000a7c:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000a7e:	6822      	ldr	r2, [r4, #0]
 8000a80:	6953      	ldr	r3, [r2, #20]
 8000a82:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8000a86:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8000a88:	6822      	ldr	r2, [r4, #0]
 8000a8a:	68d3      	ldr	r3, [r2, #12]
 8000a8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a90:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000a92:	2000      	movs	r0, #0
 8000a94:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8000a96:	2320      	movs	r3, #32
 8000a98:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8000a9c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8000aa0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8000aa2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8000aa6:	f7ff ffd3 	bl	8000a50 <HAL_UART_MspInit>
 8000aaa:	e7d8      	b.n	8000a5e <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8000aac:	2001      	movs	r0, #1
}
 8000aae:	4770      	bx	lr

08000ab0 <CommsN64Console_Init>:
#include "comms_n64_console.h"

// Initializer
void CommsN64Console_Init()
{
 8000ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ab2:	b089      	sub	sp, #36	; 0x24
	/* Set parameters for n64 communication pins */

	// Clocks
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab4:	2400      	movs	r4, #0
 8000ab6:	9401      	str	r4, [sp, #4]
 8000ab8:	4b25      	ldr	r3, [pc, #148]	; (8000b50 <CommsN64Console_Init+0xa0>)
 8000aba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000abc:	f042 0202 	orr.w	r2, r2, #2
 8000ac0:	631a      	str	r2, [r3, #48]	; 0x30
 8000ac2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ac4:	f002 0202 	and.w	r2, r2, #2
 8000ac8:	9201      	str	r2, [sp, #4]
 8000aca:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_USART1_CLK_ENABLE();
 8000acc:	9402      	str	r4, [sp, #8]
 8000ace:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ad0:	f042 0210 	orr.w	r2, r2, #16
 8000ad4:	645a      	str	r2, [r3, #68]	; 0x44
 8000ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad8:	f003 0310 	and.w	r3, r3, #16
 8000adc:	9302      	str	r3, [sp, #8]
 8000ade:	9b02      	ldr	r3, [sp, #8]

	// Init structure
	GPIO_InitTypeDef GPIO_InitStruct_CommsN64Console = {0};
 8000ae0:	9405      	str	r4, [sp, #20]
 8000ae2:	9407      	str	r4, [sp, #28]

	// Stop bit control
	GPIO_InitStruct_CommsN64Console.Pin = COMMS_N64_STOP_PIN_HAL;
 8000ae4:	2720      	movs	r7, #32
 8000ae6:	9703      	str	r7, [sp, #12]
	GPIO_InitStruct_CommsN64Console.Mode = GPIO_MODE_OUTPUT_OD;
 8000ae8:	2311      	movs	r3, #17
 8000aea:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct_CommsN64Console.Pull = GPIO_NOPULL;
	GPIO_InitStruct_CommsN64Console.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	2603      	movs	r6, #3
 8000aee:	9606      	str	r6, [sp, #24]
	HAL_GPIO_Init(COMMS_N64_STOP_PORT, &GPIO_InitStruct_CommsN64Console);
 8000af0:	4d18      	ldr	r5, [pc, #96]	; (8000b54 <CommsN64Console_Init+0xa4>)
 8000af2:	a903      	add	r1, sp, #12
 8000af4:	4628      	mov	r0, r5
 8000af6:	f7ff fdb1 	bl	800065c <HAL_GPIO_Init>
	COMMS_N64_STOP_PORT->BSRR = COMMS_N64_STOP_SET;
 8000afa:	61af      	str	r7, [r5, #24]

	// External pullup control
	GPIO_InitStruct_CommsN64Console.Pin = COMMS_N64_PULLUP_PIN_HAL;
 8000afc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b00:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct_CommsN64Console.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct_CommsN64Console.Pull = GPIO_NOPULL;
 8000b06:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct_CommsN64Console.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	9406      	str	r4, [sp, #24]
	HAL_GPIO_Init(COMMS_N64_PULLUP_PORT, &GPIO_InitStruct_CommsN64Console);
 8000b0a:	a903      	add	r1, sp, #12
 8000b0c:	4628      	mov	r0, r5
 8000b0e:	f7ff fda5 	bl	800065c <HAL_GPIO_Init>

	// USART1 TX/RX
	GPIO_InitStruct_CommsN64Console.Pin = COMMS_N64_TX_PIN_HAL | COMMS_N64_RX_PIN_HAL;
 8000b12:	23c0      	movs	r3, #192	; 0xc0
 8000b14:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct_CommsN64Console.Mode = GPIO_MODE_AF_OD;
 8000b16:	2312      	movs	r3, #18
 8000b18:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct_CommsN64Console.Alternate = GPIO_AF7_USART1;
 8000b1a:	2307      	movs	r3, #7
 8000b1c:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct_CommsN64Console.Pull = GPIO_NOPULL;
 8000b1e:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct_CommsN64Console.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b20:	9606      	str	r6, [sp, #24]
	HAL_GPIO_Init(COMMS_N64_TX_PORT, &GPIO_InitStruct_CommsN64Console);
 8000b22:	a903      	add	r1, sp, #12
 8000b24:	4628      	mov	r0, r5
 8000b26:	f7ff fd99 	bl	800065c <HAL_GPIO_Init>

	// Configure USART1
	huart1.Instance = USART1;
 8000b2a:	480b      	ldr	r0, [pc, #44]	; (8000b58 <CommsN64Console_Init+0xa8>)
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <CommsN64Console_Init+0xac>)
 8000b2e:	6003      	str	r3, [r0, #0]
	huart1.Init.BaudRate = 1300000;	// Started w/ 1,250,000 but experiments show 1,300,000 is more robust
 8000b30:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <CommsN64Console_Init+0xb0>)
 8000b32:	6043      	str	r3, [r0, #4]
	huart1.Init.WordLength = USART_WORDLENGTH_8B;
 8000b34:	6084      	str	r4, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000b36:	60c4      	str	r4, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000b38:	6104      	str	r4, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000b3a:	230c      	movs	r3, #12
 8000b3c:	6143      	str	r3, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3e:	6184      	str	r4, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8000b40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b44:	61c3      	str	r3, [r0, #28]

	HAL_UART_Init(&huart1);
 8000b46:	f7ff ff84 	bl	8000a52 <HAL_UART_Init>
}
 8000b4a:	b009      	add	sp, #36	; 0x24
 8000b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020400 	.word	0x40020400
 8000b58:	2000003c 	.word	0x2000003c
 8000b5c:	40011000 	.word	0x40011000
 8000b60:	0013d620 	.word	0x0013d620

08000b64 <CommsN64Console_SetPullup>:

void CommsN64Console_SetPullup(N64PullupState_t pull)
{
 8000b64:	b508      	push	{r3, lr}
	if(pull == N64_NOPULL)
 8000b66:	b110      	cbz	r0, 8000b6e <CommsN64Console_SetPullup+0xa>
	{
		HAL_GPIO_WritePin(COMMS_N64_PULLUP_PORT, COMMS_N64_PULLUP_PIN_HAL, GPIO_PIN_RESET);
	}
	else if(pull == N64_PULLUP)
 8000b68:	2801      	cmp	r0, #1
 8000b6a:	d00a      	beq.n	8000b82 <CommsN64Console_SetPullup+0x1e>
	}
	else
	{
		// invalid argument
	}
}
 8000b6c:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(COMMS_N64_PULLUP_PORT, COMMS_N64_PULLUP_PIN_HAL, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b74:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000b78:	f500 3001 	add.w	r0, r0, #132096	; 0x20400
 8000b7c:	f7ff fe5e 	bl	800083c <HAL_GPIO_WritePin>
 8000b80:	e7f4      	b.n	8000b6c <CommsN64Console_SetPullup+0x8>
		HAL_GPIO_WritePin(COMMS_N64_PULLUP_PORT, COMMS_N64_PULLUP_PIN_HAL, GPIO_PIN_SET);
 8000b82:	2201      	movs	r2, #1
 8000b84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b88:	4801      	ldr	r0, [pc, #4]	; (8000b90 <CommsN64Console_SetPullup+0x2c>)
 8000b8a:	f7ff fe57 	bl	800083c <HAL_GPIO_WritePin>
}
 8000b8e:	e7ed      	b.n	8000b6c <CommsN64Console_SetPullup+0x8>
 8000b90:	40020400 	.word	0x40020400

08000b94 <CommsN64Console_ParseContollerInputs>:
	COMMS_N64_STOP_PORT->BSRR = COMMS_N64_STOP_SET;
}

// Parsers
void CommsN64Console_ParseContollerInputs()
{
 8000b94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Reset controllerRegisters array
	controllerRegisters[0] = 0;
 8000b98:	48c5      	ldr	r0, [pc, #788]	; (8000eb0 <CommsN64Console_ParseContollerInputs+0x31c>)
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	7003      	strb	r3, [r0, #0]
	controllerRegisters[1] = 0;
 8000b9e:	7043      	strb	r3, [r0, #1]
	controllerRegisters[2] = 0;
 8000ba0:	7083      	strb	r3, [r0, #2]
	controllerRegisters[3] = 0;
 8000ba2:	70c3      	strb	r3, [r0, #3]
 8000ba4:	f8df 830c 	ldr.w	r8, [pc, #780]	; 8000eb4 <CommsN64Console_ParseContollerInputs+0x320>
 8000ba8:	461f      	mov	r7, r3
 8000baa:	461d      	mov	r5, r3
				rightBit = 2;
				break;

			case 3:
				leftBit = 1;
				rightBit = 0;
 8000bac:	469b      	mov	fp, r3
				leftBit = 1;
 8000bae:	2401      	movs	r4, #1
				leftBit = 3;
 8000bb0:	f04f 0a03 	mov.w	sl, #3
				rightBit = 4;
 8000bb4:	f04f 0904 	mov.w	r9, #4
		// Manipulate the chosen bits
		if( (controllerResponse[j] == UART_BYTE_2_N64_BITS_00_CASE1) ||
			(controllerResponse[j] == UART_BYTE_2_N64_BITS_00_CASE2)	)
		{
			controllerRegisters[0] &= ~(1 << leftBit);
			controllerRegisters[0] &= ~(1 << rightBit);
 8000bb8:	46a6      	mov	lr, r4
 8000bba:	e012      	b.n	8000be2 <CommsN64Console_ParseContollerInputs+0x4e>
				rightBit = 6;
 8000bbc:	2106      	movs	r1, #6
				leftBit = 7;
 8000bbe:	2207      	movs	r2, #7
		if( (controllerResponse[j] == UART_BYTE_2_N64_BITS_00_CASE1) ||
 8000bc0:	f818 0b01 	ldrb.w	r0, [r8], #1
 8000bc4:	f000 067f 	and.w	r6, r0, #127	; 0x7f
 8000bc8:	2e08      	cmp	r6, #8
 8000bca:	d022      	beq.n	8000c12 <CommsN64Console_ParseContollerInputs+0x7e>
		}
		if( (controllerResponse[j] == UART_BYTE_2_N64_BITS_01_CASE1) ||
 8000bcc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8000bd0:	28c8      	cmp	r0, #200	; 0xc8
 8000bd2:	d028      	beq.n	8000c26 <CommsN64Console_ParseContollerInputs+0x92>
			(controllerResponse[j] == UART_BYTE_2_N64_BITS_01_CASE2)	)
		{
			controllerRegisters[0] &= ~(1 << leftBit);
			controllerRegisters[0] |= (1 << rightBit);
		}
		if( (controllerResponse[j] == UART_BYTE_2_N64_BITS_10_CASE1) ||
 8000bd4:	2e0f      	cmp	r6, #15
 8000bd6:	d030      	beq.n	8000c3a <CommsN64Console_ParseContollerInputs+0xa6>
			(controllerResponse[j] == UART_BYTE_2_N64_BITS_10_CASE2)	)
		{
			controllerRegisters[0] |= (1 << leftBit);
			controllerRegisters[0] &= ~(1 << rightBit);
		}
		if( (controllerResponse[j] == UART_BYTE_2_N64_BITS_11_CASE1) ||
 8000bd8:	28cf      	cmp	r0, #207	; 0xcf
 8000bda:	d038      	beq.n	8000c4e <CommsN64Console_ParseContollerInputs+0xba>
 8000bdc:	3701      	adds	r7, #1
	for(uint8_t j = 0; j < 4; j = j + 1)
 8000bde:	2f04      	cmp	r7, #4
 8000be0:	d03e      	beq.n	8000c60 <CommsN64Console_ParseContollerInputs+0xcc>
 8000be2:	b2f8      	uxtb	r0, r7
		switch(j)
 8000be4:	2803      	cmp	r0, #3
 8000be6:	d8eb      	bhi.n	8000bc0 <CommsN64Console_ParseContollerInputs+0x2c>
 8000be8:	a601      	add	r6, pc, #4	; (adr r6, 8000bf0 <CommsN64Console_ParseContollerInputs+0x5c>)
 8000bea:	f856 f020 	ldr.w	pc, [r6, r0, lsl #2]
 8000bee:	bf00      	nop
 8000bf0:	08000bbd 	.word	0x08000bbd
 8000bf4:	08000c01 	.word	0x08000c01
 8000bf8:	08000c07 	.word	0x08000c07
 8000bfc:	08000c0d 	.word	0x08000c0d
				rightBit = 4;
 8000c00:	4649      	mov	r1, r9
				leftBit = 5;
 8000c02:	2205      	movs	r2, #5
				break;
 8000c04:	e7dc      	b.n	8000bc0 <CommsN64Console_ParseContollerInputs+0x2c>
				rightBit = 2;
 8000c06:	4601      	mov	r1, r0
				leftBit = 3;
 8000c08:	4652      	mov	r2, sl
				break;
 8000c0a:	e7d9      	b.n	8000bc0 <CommsN64Console_ParseContollerInputs+0x2c>
				rightBit = 0;
 8000c0c:	4659      	mov	r1, fp
				leftBit = 1;
 8000c0e:	4622      	mov	r2, r4
				break;
 8000c10:	e7d6      	b.n	8000bc0 <CommsN64Console_ParseContollerInputs+0x2c>
			controllerRegisters[0] &= ~(1 << leftBit);
 8000c12:	fa04 f502 	lsl.w	r5, r4, r2
			controllerRegisters[0] &= ~(1 << rightBit);
 8000c16:	fa04 fc01 	lsl.w	ip, r4, r1
 8000c1a:	ea45 050c 	orr.w	r5, r5, ip
 8000c1e:	ea23 0305 	bic.w	r3, r3, r5
 8000c22:	4675      	mov	r5, lr
 8000c24:	e7d2      	b.n	8000bcc <CommsN64Console_ParseContollerInputs+0x38>
			controllerRegisters[0] &= ~(1 << leftBit);
 8000c26:	fa04 f502 	lsl.w	r5, r4, r2
 8000c2a:	ea23 0305 	bic.w	r3, r3, r5
			controllerRegisters[0] |= (1 << rightBit);
 8000c2e:	fa04 f501 	lsl.w	r5, r4, r1
 8000c32:	432b      	orrs	r3, r5
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	4675      	mov	r5, lr
 8000c38:	e7cc      	b.n	8000bd4 <CommsN64Console_ParseContollerInputs+0x40>
			controllerRegisters[0] |= (1 << leftBit);
 8000c3a:	fa04 f502 	lsl.w	r5, r4, r2
 8000c3e:	432b      	orrs	r3, r5
			controllerRegisters[0] &= ~(1 << rightBit);
 8000c40:	fa04 f501 	lsl.w	r5, r4, r1
 8000c44:	ea23 0305 	bic.w	r3, r3, r5
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	4675      	mov	r5, lr
 8000c4c:	e7c4      	b.n	8000bd8 <CommsN64Console_ParseContollerInputs+0x44>
			(controllerResponse[j] == UART_BYTE_2_N64_BITS_11_CASE2)	)
		{
			controllerRegisters[0] |= (1 << leftBit);
 8000c4e:	fa04 f002 	lsl.w	r0, r4, r2
			controllerRegisters[0] |= (1 << rightBit);
 8000c52:	fa04 f501 	lsl.w	r5, r4, r1
 8000c56:	4328      	orrs	r0, r5
 8000c58:	4303      	orrs	r3, r0
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	4675      	mov	r5, lr
 8000c5e:	e7bd      	b.n	8000bdc <CommsN64Console_ParseContollerInputs+0x48>
 8000c60:	b965      	cbnz	r5, 8000c7c <CommsN64Console_ParseContollerInputs+0xe8>
 8000c62:	f8df 8254 	ldr.w	r8, [pc, #596]	; 8000eb8 <CommsN64Console_ParseContollerInputs+0x324>
 8000c66:	2004      	movs	r0, #4
 8000c68:	2600      	movs	r6, #0
 8000c6a:	4633      	mov	r3, r6
				rightBit = 2;
				break;

			case 7:
				leftBit = 1;
				rightBit = 0;
 8000c6c:	46b3      	mov	fp, r6
				leftBit = 1;
 8000c6e:	2501      	movs	r5, #1
				rightBit = 2;
 8000c70:	f04f 0a02 	mov.w	sl, #2
				leftBit = 3;
 8000c74:	f04f 0903 	mov.w	r9, #3
		// Manipulate the chosen bits
		if( (controllerResponse[j] == UART_BYTE_2_N64_BITS_00_CASE1) ||
			(controllerResponse[j] == UART_BYTE_2_N64_BITS_00_CASE2)	)
		{
			controllerRegisters[1] &= ~(1 << leftBit);
			controllerRegisters[1] &= ~(1 << rightBit);
 8000c78:	46ae      	mov	lr, r5
 8000c7a:	e015      	b.n	8000ca8 <CommsN64Console_ParseContollerInputs+0x114>
 8000c7c:	488c      	ldr	r0, [pc, #560]	; (8000eb0 <CommsN64Console_ParseContollerInputs+0x31c>)
 8000c7e:	7003      	strb	r3, [r0, #0]
 8000c80:	e7ef      	b.n	8000c62 <CommsN64Console_ParseContollerInputs+0xce>
				rightBit = 6;
 8000c82:	2106      	movs	r1, #6
				leftBit = 7;
 8000c84:	2207      	movs	r2, #7
		if( (controllerResponse[j] == UART_BYTE_2_N64_BITS_00_CASE1) ||
 8000c86:	f818 4b01 	ldrb.w	r4, [r8], #1
 8000c8a:	f004 077f 	and.w	r7, r4, #127	; 0x7f
 8000c8e:	2f08      	cmp	r7, #8
 8000c90:	d023      	beq.n	8000cda <CommsN64Console_ParseContollerInputs+0x146>
		}
		if( (controllerResponse[j] == UART_BYTE_2_N64_BITS_01_CASE1) ||
 8000c92:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8000c96:	2cc8      	cmp	r4, #200	; 0xc8
 8000c98:	d029      	beq.n	8000cee <CommsN64Console_ParseContollerInputs+0x15a>
			(controllerResponse[j] == UART_BYTE_2_N64_BITS_01_CASE2)	)
		{
			controllerRegisters[1] &= ~(1 << leftBit);
			controllerRegisters[1] |= (1 << rightBit);
		}
		if( (controllerResponse[j] == UART_BYTE_2_N64_BITS_10_CASE1) ||
 8000c9a:	2f0f      	cmp	r7, #15
 8000c9c:	d031      	beq.n	8000d02 <CommsN64Console_ParseContollerInputs+0x16e>
			(controllerResponse[j] == UART_BYTE_2_N64_BITS_10_CASE2)	)
		{
			controllerRegisters[1] |= (1 << leftBit);
			controllerRegisters[1] &= ~(1 << rightBit);
		}
		if( (controllerResponse[j] == UART_BYTE_2_N64_BITS_11_CASE1) ||
 8000c9e:	2ccf      	cmp	r4, #207	; 0xcf
 8000ca0:	d039      	beq.n	8000d16 <CommsN64Console_ParseContollerInputs+0x182>
 8000ca2:	3001      	adds	r0, #1
	for(uint8_t j = 4; j < 8; j = j + 1)
 8000ca4:	2808      	cmp	r0, #8
 8000ca6:	d03f      	beq.n	8000d28 <CommsN64Console_ParseContollerInputs+0x194>
 8000ca8:	b2c7      	uxtb	r7, r0
		switch(j)
 8000caa:	1f3c      	subs	r4, r7, #4
 8000cac:	2c03      	cmp	r4, #3
 8000cae:	d8ea      	bhi.n	8000c86 <CommsN64Console_ParseContollerInputs+0xf2>
 8000cb0:	f20f 0c04 	addw	ip, pc, #4
 8000cb4:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
 8000cb8:	08000c83 	.word	0x08000c83
 8000cbc:	08000cc9 	.word	0x08000cc9
 8000cc0:	08000ccf 	.word	0x08000ccf
 8000cc4:	08000cd5 	.word	0x08000cd5
				leftBit = 5;
 8000cc8:	463a      	mov	r2, r7
				rightBit = 4;
 8000cca:	2104      	movs	r1, #4
				break;
 8000ccc:	e7db      	b.n	8000c86 <CommsN64Console_ParseContollerInputs+0xf2>
				rightBit = 2;
 8000cce:	4651      	mov	r1, sl
				leftBit = 3;
 8000cd0:	464a      	mov	r2, r9
				break;
 8000cd2:	e7d8      	b.n	8000c86 <CommsN64Console_ParseContollerInputs+0xf2>
				rightBit = 0;
 8000cd4:	4659      	mov	r1, fp
				leftBit = 1;
 8000cd6:	462a      	mov	r2, r5
				break;
 8000cd8:	e7d5      	b.n	8000c86 <CommsN64Console_ParseContollerInputs+0xf2>
			controllerRegisters[1] &= ~(1 << leftBit);
 8000cda:	fa05 f602 	lsl.w	r6, r5, r2
			controllerRegisters[1] &= ~(1 << rightBit);
 8000cde:	fa05 fc01 	lsl.w	ip, r5, r1
 8000ce2:	ea46 060c 	orr.w	r6, r6, ip
 8000ce6:	ea23 0306 	bic.w	r3, r3, r6
 8000cea:	4676      	mov	r6, lr
 8000cec:	e7d1      	b.n	8000c92 <CommsN64Console_ParseContollerInputs+0xfe>
			controllerRegisters[1] &= ~(1 << leftBit);
 8000cee:	fa05 f602 	lsl.w	r6, r5, r2
 8000cf2:	ea23 0306 	bic.w	r3, r3, r6
			controllerRegisters[1] |= (1 << rightBit);
 8000cf6:	fa05 f601 	lsl.w	r6, r5, r1
 8000cfa:	4333      	orrs	r3, r6
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	4676      	mov	r6, lr
 8000d00:	e7cb      	b.n	8000c9a <CommsN64Console_ParseContollerInputs+0x106>
			controllerRegisters[1] |= (1 << leftBit);
 8000d02:	fa05 f602 	lsl.w	r6, r5, r2
 8000d06:	4333      	orrs	r3, r6
			controllerRegisters[1] &= ~(1 << rightBit);
 8000d08:	fa05 f601 	lsl.w	r6, r5, r1
 8000d0c:	ea23 0306 	bic.w	r3, r3, r6
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	4676      	mov	r6, lr
 8000d14:	e7c3      	b.n	8000c9e <CommsN64Console_ParseContollerInputs+0x10a>
			(controllerResponse[j] == UART_BYTE_2_N64_BITS_11_CASE2)	)
		{
			controllerRegisters[1] |= (1 << leftBit);
 8000d16:	fa05 f402 	lsl.w	r4, r5, r2
			controllerRegisters[1] |= (1 << rightBit);
 8000d1a:	fa05 f601 	lsl.w	r6, r5, r1
 8000d1e:	4334      	orrs	r4, r6
 8000d20:	4323      	orrs	r3, r4
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	4676      	mov	r6, lr
 8000d26:	e7bc      	b.n	8000ca2 <CommsN64Console_ParseContollerInputs+0x10e>
 8000d28:	b95e      	cbnz	r6, 8000d42 <CommsN64Console_ParseContollerInputs+0x1ae>
 8000d2a:	f8df 8190 	ldr.w	r8, [pc, #400]	; 8000ebc <CommsN64Console_ParseContollerInputs+0x328>
 8000d2e:	2600      	movs	r6, #0
 8000d30:	4633      	mov	r3, r6
				rightBit = 2;
				break;

			case 11:
				leftBit = 1;
				rightBit = 0;
 8000d32:	46b3      	mov	fp, r6
				leftBit = 1;
 8000d34:	2501      	movs	r5, #1
				rightBit = 2;
 8000d36:	f04f 0a02 	mov.w	sl, #2
				leftBit = 3;
 8000d3a:	f04f 0903 	mov.w	r9, #3
		// Manipulate the chosen bits
		if( (controllerResponse[j] == UART_BYTE_2_N64_BITS_00_CASE1) ||
			(controllerResponse[j] == UART_BYTE_2_N64_BITS_00_CASE2)	)
		{
			controllerRegisters[2] &= ~(1 << leftBit);
			controllerRegisters[2] &= ~(1 << rightBit);
 8000d3e:	46ae      	mov	lr, r5
 8000d40:	e015      	b.n	8000d6e <CommsN64Console_ParseContollerInputs+0x1da>
 8000d42:	4c5b      	ldr	r4, [pc, #364]	; (8000eb0 <CommsN64Console_ParseContollerInputs+0x31c>)
 8000d44:	7063      	strb	r3, [r4, #1]
 8000d46:	e7f0      	b.n	8000d2a <CommsN64Console_ParseContollerInputs+0x196>
				rightBit = 6;
 8000d48:	2106      	movs	r1, #6
				leftBit = 7;
 8000d4a:	2207      	movs	r2, #7
		if( (controllerResponse[j] == UART_BYTE_2_N64_BITS_00_CASE1) ||
 8000d4c:	f818 4b01 	ldrb.w	r4, [r8], #1
 8000d50:	f004 077f 	and.w	r7, r4, #127	; 0x7f
 8000d54:	2f08      	cmp	r7, #8
 8000d56:	d022      	beq.n	8000d9e <CommsN64Console_ParseContollerInputs+0x20a>
		}
		if( (controllerResponse[j] == UART_BYTE_2_N64_BITS_01_CASE1) ||
 8000d58:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8000d5c:	2cc8      	cmp	r4, #200	; 0xc8
 8000d5e:	d028      	beq.n	8000db2 <CommsN64Console_ParseContollerInputs+0x21e>
			(controllerResponse[j] == UART_BYTE_2_N64_BITS_01_CASE2)	)
		{
			controllerRegisters[2] &= ~(1 << leftBit);
			controllerRegisters[2] |= (1 << rightBit);
		}
		if( (controllerResponse[j] == UART_BYTE_2_N64_BITS_10_CASE1) ||
 8000d60:	2f0f      	cmp	r7, #15
 8000d62:	d030      	beq.n	8000dc6 <CommsN64Console_ParseContollerInputs+0x232>
			(controllerResponse[j] == UART_BYTE_2_N64_BITS_10_CASE2)	)
		{
			controllerRegisters[2] |= (1 << leftBit);
			controllerRegisters[2] &= ~(1 << rightBit);
		}
		if( (controllerResponse[j] == UART_BYTE_2_N64_BITS_11_CASE1) ||
 8000d64:	2ccf      	cmp	r4, #207	; 0xcf
 8000d66:	d038      	beq.n	8000dda <CommsN64Console_ParseContollerInputs+0x246>
 8000d68:	3001      	adds	r0, #1
	for(uint8_t j = 8; j < 12; j = j + 1)
 8000d6a:	280c      	cmp	r0, #12
 8000d6c:	d03e      	beq.n	8000dec <CommsN64Console_ParseContollerInputs+0x258>
		switch(j)
 8000d6e:	b2c4      	uxtb	r4, r0
 8000d70:	3c08      	subs	r4, #8
 8000d72:	2c03      	cmp	r4, #3
 8000d74:	d8ea      	bhi.n	8000d4c <CommsN64Console_ParseContollerInputs+0x1b8>
 8000d76:	a701      	add	r7, pc, #4	; (adr r7, 8000d7c <CommsN64Console_ParseContollerInputs+0x1e8>)
 8000d78:	f857 f024 	ldr.w	pc, [r7, r4, lsl #2]
 8000d7c:	08000d49 	.word	0x08000d49
 8000d80:	08000d8d 	.word	0x08000d8d
 8000d84:	08000d93 	.word	0x08000d93
 8000d88:	08000d99 	.word	0x08000d99
				rightBit = 4;
 8000d8c:	2104      	movs	r1, #4
				leftBit = 5;
 8000d8e:	2205      	movs	r2, #5
				break;
 8000d90:	e7dc      	b.n	8000d4c <CommsN64Console_ParseContollerInputs+0x1b8>
				rightBit = 2;
 8000d92:	4651      	mov	r1, sl
				leftBit = 3;
 8000d94:	464a      	mov	r2, r9
				break;
 8000d96:	e7d9      	b.n	8000d4c <CommsN64Console_ParseContollerInputs+0x1b8>
				rightBit = 0;
 8000d98:	4659      	mov	r1, fp
				leftBit = 1;
 8000d9a:	462a      	mov	r2, r5
				break;
 8000d9c:	e7d6      	b.n	8000d4c <CommsN64Console_ParseContollerInputs+0x1b8>
			controllerRegisters[2] &= ~(1 << leftBit);
 8000d9e:	fa05 f602 	lsl.w	r6, r5, r2
			controllerRegisters[2] &= ~(1 << rightBit);
 8000da2:	fa05 fc01 	lsl.w	ip, r5, r1
 8000da6:	ea46 060c 	orr.w	r6, r6, ip
 8000daa:	ea23 0306 	bic.w	r3, r3, r6
 8000dae:	4676      	mov	r6, lr
 8000db0:	e7d2      	b.n	8000d58 <CommsN64Console_ParseContollerInputs+0x1c4>
			controllerRegisters[2] &= ~(1 << leftBit);
 8000db2:	fa05 f602 	lsl.w	r6, r5, r2
 8000db6:	ea23 0306 	bic.w	r3, r3, r6
			controllerRegisters[2] |= (1 << rightBit);
 8000dba:	fa05 f601 	lsl.w	r6, r5, r1
 8000dbe:	4333      	orrs	r3, r6
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	4676      	mov	r6, lr
 8000dc4:	e7cc      	b.n	8000d60 <CommsN64Console_ParseContollerInputs+0x1cc>
			controllerRegisters[2] |= (1 << leftBit);
 8000dc6:	fa05 f602 	lsl.w	r6, r5, r2
 8000dca:	4333      	orrs	r3, r6
			controllerRegisters[2] &= ~(1 << rightBit);
 8000dcc:	fa05 f601 	lsl.w	r6, r5, r1
 8000dd0:	ea23 0306 	bic.w	r3, r3, r6
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	4676      	mov	r6, lr
 8000dd8:	e7c4      	b.n	8000d64 <CommsN64Console_ParseContollerInputs+0x1d0>
			(controllerResponse[j] == UART_BYTE_2_N64_BITS_11_CASE2)	)
		{
			controllerRegisters[2] |= (1 << leftBit);
 8000dda:	fa05 f402 	lsl.w	r4, r5, r2
			controllerRegisters[2] |= (1 << rightBit);
 8000dde:	fa05 f601 	lsl.w	r6, r5, r1
 8000de2:	4334      	orrs	r4, r6
 8000de4:	4323      	orrs	r3, r4
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	4676      	mov	r6, lr
 8000dea:	e7bd      	b.n	8000d68 <CommsN64Console_ParseContollerInputs+0x1d4>
 8000dec:	b95e      	cbnz	r6, 8000e06 <CommsN64Console_ParseContollerInputs+0x272>
 8000dee:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000ec0 <CommsN64Console_ParseContollerInputs+0x32c>
 8000df2:	2600      	movs	r6, #0
 8000df4:	4633      	mov	r3, r6
				rightBit = 2;
				break;

			case 15:
				leftBit = 1;
				rightBit = 0;
 8000df6:	46b3      	mov	fp, r6
				leftBit = 1;
 8000df8:	2501      	movs	r5, #1
				rightBit = 2;
 8000dfa:	f04f 0a02 	mov.w	sl, #2
				leftBit = 3;
 8000dfe:	f04f 0903 	mov.w	r9, #3
		// Manipulate the chosen bits
		if( (controllerResponse[j] == UART_BYTE_2_N64_BITS_00_CASE1) ||
			(controllerResponse[j] == UART_BYTE_2_N64_BITS_00_CASE2)	)
		{
			controllerRegisters[3] &= ~(1 << leftBit);
			controllerRegisters[3] &= ~(1 << rightBit);
 8000e02:	46ae      	mov	lr, r5
 8000e04:	e015      	b.n	8000e32 <CommsN64Console_ParseContollerInputs+0x29e>
 8000e06:	4c2a      	ldr	r4, [pc, #168]	; (8000eb0 <CommsN64Console_ParseContollerInputs+0x31c>)
 8000e08:	70a3      	strb	r3, [r4, #2]
 8000e0a:	e7f0      	b.n	8000dee <CommsN64Console_ParseContollerInputs+0x25a>
				rightBit = 6;
 8000e0c:	2106      	movs	r1, #6
				leftBit = 7;
 8000e0e:	2207      	movs	r2, #7
		if( (controllerResponse[j] == UART_BYTE_2_N64_BITS_00_CASE1) ||
 8000e10:	f818 4b01 	ldrb.w	r4, [r8], #1
 8000e14:	f004 077f 	and.w	r7, r4, #127	; 0x7f
 8000e18:	2f08      	cmp	r7, #8
 8000e1a:	d022      	beq.n	8000e62 <CommsN64Console_ParseContollerInputs+0x2ce>
		}
		if( (controllerResponse[j] == UART_BYTE_2_N64_BITS_01_CASE1) ||
 8000e1c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8000e20:	2cc8      	cmp	r4, #200	; 0xc8
 8000e22:	d028      	beq.n	8000e76 <CommsN64Console_ParseContollerInputs+0x2e2>
			(controllerResponse[j] == UART_BYTE_2_N64_BITS_01_CASE2)	)
		{
			controllerRegisters[3] &= ~(1 << leftBit);
			controllerRegisters[3] |= (1 << rightBit);
		}
		if( (controllerResponse[j] == UART_BYTE_2_N64_BITS_10_CASE1) ||
 8000e24:	2f0f      	cmp	r7, #15
 8000e26:	d030      	beq.n	8000e8a <CommsN64Console_ParseContollerInputs+0x2f6>
			(controllerResponse[j] == UART_BYTE_2_N64_BITS_10_CASE2)	)
		{
			controllerRegisters[3] |= (1 << leftBit);
			controllerRegisters[3] &= ~(1 << rightBit);
		}
		if( (controllerResponse[j] == UART_BYTE_2_N64_BITS_11_CASE1) ||
 8000e28:	2ccf      	cmp	r4, #207	; 0xcf
 8000e2a:	d038      	beq.n	8000e9e <CommsN64Console_ParseContollerInputs+0x30a>
 8000e2c:	3001      	adds	r0, #1
	for(uint8_t j = 12; j < 16; j = j + 1)
 8000e2e:	2810      	cmp	r0, #16
 8000e30:	d048      	beq.n	8000ec4 <CommsN64Console_ParseContollerInputs+0x330>
		switch(j)
 8000e32:	b2c4      	uxtb	r4, r0
 8000e34:	3c0c      	subs	r4, #12
 8000e36:	2c03      	cmp	r4, #3
 8000e38:	d8ea      	bhi.n	8000e10 <CommsN64Console_ParseContollerInputs+0x27c>
 8000e3a:	a701      	add	r7, pc, #4	; (adr r7, 8000e40 <CommsN64Console_ParseContollerInputs+0x2ac>)
 8000e3c:	f857 f024 	ldr.w	pc, [r7, r4, lsl #2]
 8000e40:	08000e0d 	.word	0x08000e0d
 8000e44:	08000e51 	.word	0x08000e51
 8000e48:	08000e57 	.word	0x08000e57
 8000e4c:	08000e5d 	.word	0x08000e5d
				rightBit = 4;
 8000e50:	2104      	movs	r1, #4
				leftBit = 5;
 8000e52:	2205      	movs	r2, #5
				break;
 8000e54:	e7dc      	b.n	8000e10 <CommsN64Console_ParseContollerInputs+0x27c>
				rightBit = 2;
 8000e56:	4651      	mov	r1, sl
				leftBit = 3;
 8000e58:	464a      	mov	r2, r9
				break;
 8000e5a:	e7d9      	b.n	8000e10 <CommsN64Console_ParseContollerInputs+0x27c>
				rightBit = 0;
 8000e5c:	4659      	mov	r1, fp
				leftBit = 1;
 8000e5e:	462a      	mov	r2, r5
				break;
 8000e60:	e7d6      	b.n	8000e10 <CommsN64Console_ParseContollerInputs+0x27c>
			controllerRegisters[3] &= ~(1 << leftBit);
 8000e62:	fa05 f602 	lsl.w	r6, r5, r2
			controllerRegisters[3] &= ~(1 << rightBit);
 8000e66:	fa05 fc01 	lsl.w	ip, r5, r1
 8000e6a:	ea46 060c 	orr.w	r6, r6, ip
 8000e6e:	ea23 0306 	bic.w	r3, r3, r6
 8000e72:	4676      	mov	r6, lr
 8000e74:	e7d2      	b.n	8000e1c <CommsN64Console_ParseContollerInputs+0x288>
			controllerRegisters[3] &= ~(1 << leftBit);
 8000e76:	fa05 f602 	lsl.w	r6, r5, r2
 8000e7a:	ea23 0306 	bic.w	r3, r3, r6
			controllerRegisters[3] |= (1 << rightBit);
 8000e7e:	fa05 f601 	lsl.w	r6, r5, r1
 8000e82:	4333      	orrs	r3, r6
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	4676      	mov	r6, lr
 8000e88:	e7cc      	b.n	8000e24 <CommsN64Console_ParseContollerInputs+0x290>
			controllerRegisters[3] |= (1 << leftBit);
 8000e8a:	fa05 f602 	lsl.w	r6, r5, r2
 8000e8e:	4333      	orrs	r3, r6
			controllerRegisters[3] &= ~(1 << rightBit);
 8000e90:	fa05 f601 	lsl.w	r6, r5, r1
 8000e94:	ea23 0306 	bic.w	r3, r3, r6
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	4676      	mov	r6, lr
 8000e9c:	e7c4      	b.n	8000e28 <CommsN64Console_ParseContollerInputs+0x294>
			(controllerResponse[j] == UART_BYTE_2_N64_BITS_11_CASE2)	)
		{
			controllerRegisters[3] |= (1 << leftBit);
 8000e9e:	fa05 f402 	lsl.w	r4, r5, r2
			controllerRegisters[3] |= (1 << rightBit);
 8000ea2:	fa05 f601 	lsl.w	r6, r5, r1
 8000ea6:	4334      	orrs	r4, r6
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	4676      	mov	r6, lr
 8000eae:	e7bd      	b.n	8000e2c <CommsN64Console_ParseContollerInputs+0x298>
 8000eb0:	20000028 	.word	0x20000028
 8000eb4:	2000002c 	.word	0x2000002c
 8000eb8:	20000030 	.word	0x20000030
 8000ebc:	20000034 	.word	0x20000034
 8000ec0:	20000038 	.word	0x20000038
 8000ec4:	bb1e      	cbnz	r6, 8000f0e <CommsN64Console_ParseContollerInputs+0x37a>
		}
	}

	HAL_Delay(1);
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	f7ff fb5a 	bl	8000580 <HAL_Delay>
	while(!(USART1->SR & USART_SR_TXE)){};
 8000ecc:	4a19      	ldr	r2, [pc, #100]	; (8000f34 <CommsN64Console_ParseContollerInputs+0x3a0>)
 8000ece:	6813      	ldr	r3, [r2, #0]
 8000ed0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000ed4:	d0fb      	beq.n	8000ece <CommsN64Console_ParseContollerInputs+0x33a>
	USART1->DR = (controllerRegisters[3] & 0xFF);
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <CommsN64Console_ParseContollerInputs+0x3a4>)
 8000ed8:	78da      	ldrb	r2, [r3, #3]
 8000eda:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <CommsN64Console_ParseContollerInputs+0x3a0>)
 8000edc:	605a      	str	r2, [r3, #4]
	while(!(USART1->SR & USART_SR_TC)){};
 8000ede:	461a      	mov	r2, r3
 8000ee0:	6813      	ldr	r3, [r2, #0]
 8000ee2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000ee6:	d0fb      	beq.n	8000ee0 <CommsN64Console_ParseContollerInputs+0x34c>
	HAL_Delay(1);
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f7ff fb49 	bl	8000580 <HAL_Delay>

	if(controllerRegisters[0] > 1 || controllerRegisters[1] > 1 ||
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <CommsN64Console_ParseContollerInputs+0x3a4>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d803      	bhi.n	8000efe <CommsN64Console_ParseContollerInputs+0x36a>
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <CommsN64Console_ParseContollerInputs+0x3a4>)
 8000ef8:	785b      	ldrb	r3, [r3, #1]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d90a      	bls.n	8000f14 <CommsN64Console_ParseContollerInputs+0x380>
	   controllerRegisters[2] > 1 || controllerRegisters[3] > 1   )
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f04:	480d      	ldr	r0, [pc, #52]	; (8000f3c <CommsN64Console_ParseContollerInputs+0x3a8>)
 8000f06:	f7ff fc99 	bl	800083c <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
	}
}
 8000f0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <CommsN64Console_ParseContollerInputs+0x3a4>)
 8000f10:	70d3      	strb	r3, [r2, #3]
 8000f12:	e7d8      	b.n	8000ec6 <CommsN64Console_ParseContollerInputs+0x332>
	   controllerRegisters[2] > 1 || controllerRegisters[3] > 1   )
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <CommsN64Console_ParseContollerInputs+0x3a4>)
	if(controllerRegisters[0] > 1 || controllerRegisters[1] > 1 ||
 8000f16:	789b      	ldrb	r3, [r3, #2]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d8f0      	bhi.n	8000efe <CommsN64Console_ParseContollerInputs+0x36a>
	   controllerRegisters[2] > 1 || controllerRegisters[3] > 1   )
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <CommsN64Console_ParseContollerInputs+0x3a4>)
 8000f1e:	78db      	ldrb	r3, [r3, #3]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d8ec      	bhi.n	8000efe <CommsN64Console_ParseContollerInputs+0x36a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000f24:	2201      	movs	r2, #1
 8000f26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f2a:	4804      	ldr	r0, [pc, #16]	; (8000f3c <CommsN64Console_ParseContollerInputs+0x3a8>)
 8000f2c:	f7ff fc86 	bl	800083c <HAL_GPIO_WritePin>
}
 8000f30:	e7eb      	b.n	8000f0a <CommsN64Console_ParseContollerInputs+0x376>
 8000f32:	bf00      	nop
 8000f34:	40011000 	.word	0x40011000
 8000f38:	20000028 	.word	0x20000028
 8000f3c:	40020800 	.word	0x40020800

08000f40 <CommsN64Console_GetContollerInputs>:
{
	// Future implementation
}

void CommsN64Console_GetContollerInputs()
{
 8000f40:	b082      	sub	sp, #8
	 * performed, there is about 2.5 microseconds left before the n64 controller
	 * begins to respond. For a STM32F411CE running at 100MHz, this be more than
	 * enough time to prepare a way to capture the data.
	 */
	// Disable the receiver
	USART1->CR1 &= ~USART_CR1_RE;
 8000f42:	4a6a      	ldr	r2, [pc, #424]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 8000f44:	68d3      	ldr	r3, [r2, #12]
 8000f46:	f023 0304 	bic.w	r3, r3, #4
 8000f4a:	60d3      	str	r3, [r2, #12]

	// Make sure the transmit data register is empty before sending next byte
	while(!(USART1->SR & USART_SR_TXE)){};
 8000f4c:	6813      	ldr	r3, [r2, #0]
 8000f4e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000f52:	d0fb      	beq.n	8000f4c <CommsN64Console_GetContollerInputs+0xc>
	// Send a byte (2 n64 bits)
	USART1->DR = (0x08 & 0xFF);
 8000f54:	4b65      	ldr	r3, [pc, #404]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 8000f56:	2208      	movs	r2, #8
 8000f58:	605a      	str	r2, [r3, #4]

	// Make sure the transmit data register is empty before sending a byte
	while(!(USART1->SR & USART_SR_TXE)){};
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	6813      	ldr	r3, [r2, #0]
 8000f5e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000f62:	d0fb      	beq.n	8000f5c <CommsN64Console_GetContollerInputs+0x1c>
	// Send a byte (2 n64 bits)
	USART1->DR = (0x08 & 0xFF);
 8000f64:	4b61      	ldr	r3, [pc, #388]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 8000f66:	2208      	movs	r2, #8
 8000f68:	605a      	str	r2, [r3, #4]

	// Make sure the transmit data register is empty before sending a byte
	while(!(USART1->SR & USART_SR_TXE)){};
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	6813      	ldr	r3, [r2, #0]
 8000f6e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000f72:	d0fb      	beq.n	8000f6c <CommsN64Console_GetContollerInputs+0x2c>
	// Send a byte (2 n64 bits)
	USART1->DR = (0x08 & 0xFF);
 8000f74:	4b5d      	ldr	r3, [pc, #372]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 8000f76:	2208      	movs	r2, #8
 8000f78:	605a      	str	r2, [r3, #4]

	// Make sure the transmit data register is empty before sending a byte
	while(!(USART1->SR & USART_SR_TXE)){};
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	6813      	ldr	r3, [r2, #0]
 8000f7e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000f82:	d0fb      	beq.n	8000f7c <CommsN64Console_GetContollerInputs+0x3c>
	// Send a byte (2 n64 bits)
	USART1->DR = (0xE8 & 0xFF);
 8000f84:	4b59      	ldr	r3, [pc, #356]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 8000f86:	22e8      	movs	r2, #232	; 0xe8
 8000f88:	605a      	str	r2, [r3, #4]

	// Make sure the last uart byte transmission is complete before sending stop bit
	while(!(USART1->SR & USART_SR_TC)){};
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	6813      	ldr	r3, [r2, #0]
 8000f8e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000f92:	d0fb      	beq.n	8000f8c <CommsN64Console_GetContollerInputs+0x4c>
	COMMS_N64_STOP_PORT->BSRR = COMMS_N64_STOP_CLEAR;
 8000f94:	4b56      	ldr	r3, [pc, #344]	; (80010f0 <CommsN64Console_GetContollerInputs+0x1b0>)
 8000f96:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f9a:	619a      	str	r2, [r3, #24]
	volatile uint32_t counter = 1;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	9301      	str	r3, [sp, #4]
	while(counter--);
 8000fa0:	9b01      	ldr	r3, [sp, #4]
 8000fa2:	1e5a      	subs	r2, r3, #1
 8000fa4:	9201      	str	r2, [sp, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1fa      	bne.n	8000fa0 <CommsN64Console_GetContollerInputs+0x60>
	COMMS_N64_STOP_PORT->BSRR = COMMS_N64_STOP_SET;
 8000faa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fae:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 8000fb2:	2220      	movs	r2, #32
 8000fb4:	619a      	str	r2, [r3, #24]
	 * bit after this 4 n64 byte transmission. That means the uart receiver must
	 * be disabled after the last acquired byte. Of course before grabbing the
	 * first byte, enabled the uart receiver.
	 */
	// Enable the uart receiver
	USART1->CR1 |= USART_CR1_RE;
 8000fb6:	4a4d      	ldr	r2, [pc, #308]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 8000fb8:	68d3      	ldr	r3, [r2, #12]
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	60d3      	str	r3, [r2, #12]

	// Grab states for A and B
	while(!(USART1->SR & USART_SR_RXNE)){};
 8000fc0:	6813      	ldr	r3, [r2, #0]
 8000fc2:	f013 0f20 	tst.w	r3, #32
 8000fc6:	d0fb      	beq.n	8000fc0 <CommsN64Console_GetContollerInputs+0x80>
	controllerResponse[0] = USART1->DR;
 8000fc8:	4b48      	ldr	r3, [pc, #288]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 8000fca:	685a      	ldr	r2, [r3, #4]
 8000fcc:	4b49      	ldr	r3, [pc, #292]	; (80010f4 <CommsN64Console_GetContollerInputs+0x1b4>)
 8000fce:	701a      	strb	r2, [r3, #0]

	// Grab states for Z and START
	while(!(USART1->SR & USART_SR_RXNE)){};
 8000fd0:	4a46      	ldr	r2, [pc, #280]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 8000fd2:	6813      	ldr	r3, [r2, #0]
 8000fd4:	f013 0f20 	tst.w	r3, #32
 8000fd8:	d0fb      	beq.n	8000fd2 <CommsN64Console_GetContollerInputs+0x92>
	controllerResponse[1] = USART1->DR;
 8000fda:	4b44      	ldr	r3, [pc, #272]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 8000fdc:	685a      	ldr	r2, [r3, #4]
 8000fde:	4b45      	ldr	r3, [pc, #276]	; (80010f4 <CommsN64Console_GetContollerInputs+0x1b4>)
 8000fe0:	705a      	strb	r2, [r3, #1]

	// Grab states for DU and DD
	while(!(USART1->SR & USART_SR_RXNE)){};
 8000fe2:	4a42      	ldr	r2, [pc, #264]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 8000fe4:	6813      	ldr	r3, [r2, #0]
 8000fe6:	f013 0f20 	tst.w	r3, #32
 8000fea:	d0fb      	beq.n	8000fe4 <CommsN64Console_GetContollerInputs+0xa4>
	controllerResponse[2] = USART1->DR;
 8000fec:	4b3f      	ldr	r3, [pc, #252]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	4b40      	ldr	r3, [pc, #256]	; (80010f4 <CommsN64Console_GetContollerInputs+0x1b4>)
 8000ff2:	709a      	strb	r2, [r3, #2]

	// Grab states for DL and DR
	while(!(USART1->SR & USART_SR_RXNE)){};
 8000ff4:	4a3d      	ldr	r2, [pc, #244]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 8000ff6:	6813      	ldr	r3, [r2, #0]
 8000ff8:	f013 0f20 	tst.w	r3, #32
 8000ffc:	d0fb      	beq.n	8000ff6 <CommsN64Console_GetContollerInputs+0xb6>
	controllerResponse[3] = USART1->DR;
 8000ffe:	4b3b      	ldr	r3, [pc, #236]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 8001000:	685a      	ldr	r2, [r3, #4]
 8001002:	4b3c      	ldr	r3, [pc, #240]	; (80010f4 <CommsN64Console_GetContollerInputs+0x1b4>)
 8001004:	70da      	strb	r2, [r3, #3]

	// Grab states for RESET and RESERVED
	while(!(USART1->SR & USART_SR_RXNE)){};
 8001006:	4a39      	ldr	r2, [pc, #228]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 8001008:	6813      	ldr	r3, [r2, #0]
 800100a:	f013 0f20 	tst.w	r3, #32
 800100e:	d0fb      	beq.n	8001008 <CommsN64Console_GetContollerInputs+0xc8>
	controllerResponse[4] = USART1->DR;
 8001010:	4b36      	ldr	r3, [pc, #216]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	4b37      	ldr	r3, [pc, #220]	; (80010f4 <CommsN64Console_GetContollerInputs+0x1b4>)
 8001016:	711a      	strb	r2, [r3, #4]

	// Grab states for L and R
	while(!(USART1->SR & USART_SR_RXNE)){};
 8001018:	4a34      	ldr	r2, [pc, #208]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 800101a:	6813      	ldr	r3, [r2, #0]
 800101c:	f013 0f20 	tst.w	r3, #32
 8001020:	d0fb      	beq.n	800101a <CommsN64Console_GetContollerInputs+0xda>
	controllerResponse[5] = USART1->DR;
 8001022:	4b32      	ldr	r3, [pc, #200]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <CommsN64Console_GetContollerInputs+0x1b4>)
 8001028:	715a      	strb	r2, [r3, #5]

	// Grab states for CU and CD
	while(!(USART1->SR & USART_SR_RXNE)){};
 800102a:	4a30      	ldr	r2, [pc, #192]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 800102c:	6813      	ldr	r3, [r2, #0]
 800102e:	f013 0f20 	tst.w	r3, #32
 8001032:	d0fb      	beq.n	800102c <CommsN64Console_GetContollerInputs+0xec>
	controllerResponse[6] = USART1->DR;
 8001034:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	4b2e      	ldr	r3, [pc, #184]	; (80010f4 <CommsN64Console_GetContollerInputs+0x1b4>)
 800103a:	719a      	strb	r2, [r3, #6]

	// Grab states for CL and CR
	while(!(USART1->SR & USART_SR_RXNE)){};
 800103c:	4a2b      	ldr	r2, [pc, #172]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 800103e:	6813      	ldr	r3, [r2, #0]
 8001040:	f013 0f20 	tst.w	r3, #32
 8001044:	d0fb      	beq.n	800103e <CommsN64Console_GetContollerInputs+0xfe>
	controllerResponse[7] = USART1->DR;
 8001046:	4b29      	ldr	r3, [pc, #164]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	4b2a      	ldr	r3, [pc, #168]	; (80010f4 <CommsN64Console_GetContollerInputs+0x1b4>)
 800104c:	71da      	strb	r2, [r3, #7]

	// Grab states for X-AXIS BIT7 & BIT6
	while(!(USART1->SR & USART_SR_RXNE)){};
 800104e:	4a27      	ldr	r2, [pc, #156]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 8001050:	6813      	ldr	r3, [r2, #0]
 8001052:	f013 0f20 	tst.w	r3, #32
 8001056:	d0fb      	beq.n	8001050 <CommsN64Console_GetContollerInputs+0x110>
	controllerResponse[8] = USART1->DR;
 8001058:	4b24      	ldr	r3, [pc, #144]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <CommsN64Console_GetContollerInputs+0x1b4>)
 800105e:	721a      	strb	r2, [r3, #8]

	// Grab states for X-AXIS BIT5 & BIT4
	while(!(USART1->SR & USART_SR_RXNE)){};
 8001060:	4a22      	ldr	r2, [pc, #136]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 8001062:	6813      	ldr	r3, [r2, #0]
 8001064:	f013 0f20 	tst.w	r3, #32
 8001068:	d0fb      	beq.n	8001062 <CommsN64Console_GetContollerInputs+0x122>
	controllerResponse[9] = USART1->DR;
 800106a:	4b20      	ldr	r3, [pc, #128]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <CommsN64Console_GetContollerInputs+0x1b4>)
 8001070:	725a      	strb	r2, [r3, #9]

	// Grab states for X-AXIS BIT3 & BIT2
	while(!(USART1->SR & USART_SR_RXNE)){};
 8001072:	4a1e      	ldr	r2, [pc, #120]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 8001074:	6813      	ldr	r3, [r2, #0]
 8001076:	f013 0f20 	tst.w	r3, #32
 800107a:	d0fb      	beq.n	8001074 <CommsN64Console_GetContollerInputs+0x134>
	controllerResponse[10] = USART1->DR;
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <CommsN64Console_GetContollerInputs+0x1b4>)
 8001082:	729a      	strb	r2, [r3, #10]
	// Grab states for X-AXIS BIT1 & BIT0
	while(!(USART1->SR & USART_SR_RXNE)){};
 8001084:	4a19      	ldr	r2, [pc, #100]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 8001086:	6813      	ldr	r3, [r2, #0]
 8001088:	f013 0f20 	tst.w	r3, #32
 800108c:	d0fb      	beq.n	8001086 <CommsN64Console_GetContollerInputs+0x146>
	controllerResponse[11] = USART1->DR;
 800108e:	4b17      	ldr	r3, [pc, #92]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <CommsN64Console_GetContollerInputs+0x1b4>)
 8001094:	72da      	strb	r2, [r3, #11]

	// Grab states for Y-AXIS BIT7 & BIT6
	while(!(USART1->SR & USART_SR_RXNE)){};
 8001096:	4a15      	ldr	r2, [pc, #84]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 8001098:	6813      	ldr	r3, [r2, #0]
 800109a:	f013 0f20 	tst.w	r3, #32
 800109e:	d0fb      	beq.n	8001098 <CommsN64Console_GetContollerInputs+0x158>
	controllerResponse[12] = USART1->DR;
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <CommsN64Console_GetContollerInputs+0x1b4>)
 80010a6:	731a      	strb	r2, [r3, #12]

	// Grab states for Y-AXIS BIT5 & BIT4
	while(!(USART1->SR & USART_SR_RXNE)){};
 80010a8:	4a10      	ldr	r2, [pc, #64]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 80010aa:	6813      	ldr	r3, [r2, #0]
 80010ac:	f013 0f20 	tst.w	r3, #32
 80010b0:	d0fb      	beq.n	80010aa <CommsN64Console_GetContollerInputs+0x16a>
	controllerResponse[13] = USART1->DR;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <CommsN64Console_GetContollerInputs+0x1b4>)
 80010b8:	735a      	strb	r2, [r3, #13]

	// Grab states for Y-AXIS BIT3 & BIT2
	while(!(USART1->SR & USART_SR_RXNE)){};
 80010ba:	4a0c      	ldr	r2, [pc, #48]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 80010bc:	6813      	ldr	r3, [r2, #0]
 80010be:	f013 0f20 	tst.w	r3, #32
 80010c2:	d0fb      	beq.n	80010bc <CommsN64Console_GetContollerInputs+0x17c>
	controllerResponse[14] = USART1->DR;
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <CommsN64Console_GetContollerInputs+0x1b4>)
 80010ca:	739a      	strb	r2, [r3, #14]

	// Grab states for Y-AXIS BIT1 & BIT0
	while(!(USART1->SR & USART_SR_RXNE)){};
 80010cc:	4a07      	ldr	r2, [pc, #28]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 80010ce:	6813      	ldr	r3, [r2, #0]
 80010d0:	f013 0f20 	tst.w	r3, #32
 80010d4:	d0fb      	beq.n	80010ce <CommsN64Console_GetContollerInputs+0x18e>
	controllerResponse[15] = USART1->DR;
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <CommsN64Console_GetContollerInputs+0x1ac>)
 80010d8:	6859      	ldr	r1, [r3, #4]
 80010da:	4a06      	ldr	r2, [pc, #24]	; (80010f4 <CommsN64Console_GetContollerInputs+0x1b4>)
 80010dc:	73d1      	strb	r1, [r2, #15]

	// Disable the receiver
	USART1->CR1 &= ~USART_CR1_RE;
 80010de:	68da      	ldr	r2, [r3, #12]
 80010e0:	f022 0204 	bic.w	r2, r2, #4
 80010e4:	60da      	str	r2, [r3, #12]
//	HAL_Delay(2);
//	while(!(USART1->SR & USART_SR_TXE)){};
//	USART1->DR = (controllerResponse[0] & 0xFF);
//	while(!(USART1->SR & USART_SR_TC)){};
//	HAL_Delay(5);
}
 80010e6:	b002      	add	sp, #8
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40011000 	.word	0x40011000
 80010f0:	40020400 	.word	0x40020400
 80010f4:	2000002c 	.word	0x2000002c

080010f8 <Main_SetBlueLed>:
    }
}

// Setters
void Main_SetBlueLed(GPIO_PinState pinState)
{
 80010f8:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN_HAL, pinState);
 80010fa:	4602      	mov	r2, r0
 80010fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001100:	4801      	ldr	r0, [pc, #4]	; (8001108 <Main_SetBlueLed+0x10>)
 8001102:	f7ff fb9b 	bl	800083c <HAL_GPIO_WritePin>
}
 8001106:	bd08      	pop	{r3, pc}
 8001108:	40020800 	.word	0x40020800

0800110c <SysTick_Handler>:

// Misc
void SysTick_Handler(void)
{
 800110c:	b508      	push	{r3, lr}
	HAL_IncTick();
 800110e:	f7ff fa25 	bl	800055c <HAL_IncTick>
}
 8001112:	bd08      	pop	{r3, pc}

08001114 <Main_Init>:

// Initializer
void Main_Init()
{
 8001114:	b510      	push	{r4, lr}
 8001116:	b088      	sub	sp, #32
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001118:	2200      	movs	r2, #0
 800111a:	9200      	str	r2, [sp, #0]
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <Main_Init+0x68>)
 800111e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001120:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001124:	6319      	str	r1, [r3, #48]	; 0x30
 8001126:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001128:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800112c:	9100      	str	r1, [sp, #0]
 800112e:	9900      	ldr	r1, [sp, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001130:	9201      	str	r2, [sp, #4]
 8001132:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001134:	f041 0101 	orr.w	r1, r1, #1
 8001138:	6319      	str	r1, [r3, #48]	; 0x30
 800113a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800113c:	f001 0101 	and.w	r1, r1, #1
 8001140:	9101      	str	r1, [sp, #4]
 8001142:	9901      	ldr	r1, [sp, #4]

	GPIO_InitTypeDef GPIO_InitStruct_Main = {0};
 8001144:	9205      	str	r2, [sp, #20]
 8001146:	9206      	str	r2, [sp, #24]
 8001148:	9207      	str	r2, [sp, #28]
	GPIO_InitStruct_Main.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct_Main.Alternate = GPIO_AF0_MCO;
	//HAL_GPIO_Init(GPIOA, &GPIO_InitStruct_Main);

	/* Initialize the blue led */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800114a:	9202      	str	r2, [sp, #8]
 800114c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800114e:	f042 0204 	orr.w	r2, r2, #4
 8001152:	631a      	str	r2, [r3, #48]	; 0x30
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	9302      	str	r3, [sp, #8]
 800115c:	9b02      	ldr	r3, [sp, #8]

	GPIO_InitStruct_Main.Pin = BLUE_LED_PIN_HAL;
 800115e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001162:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct_Main.Mode = GPIO_MODE_OUTPUT_PP;
 8001164:	2401      	movs	r4, #1
 8001166:	9404      	str	r4, [sp, #16]
	GPIO_InitStruct_Main.Pull = GPIO_NOPULL;
	GPIO_InitStruct_Main.Speed = GPIO_SPEED_FREQ_LOW;

	HAL_GPIO_Init(BLUE_LED_PORT, &GPIO_InitStruct_Main);
 8001168:	a903      	add	r1, sp, #12
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <Main_Init+0x6c>)
 800116c:	f7ff fa76 	bl	800065c <HAL_GPIO_Init>

	/* Keep the blue LED off */
	Main_SetBlueLed(BLUE_LED_OFF);
 8001170:	4620      	mov	r0, r4
 8001172:	f7ff ffc1 	bl	80010f8 <Main_SetBlueLed>
}
 8001176:	b008      	add	sp, #32
 8001178:	bd10      	pop	{r4, pc}
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800
 8001180:	40020800 	.word	0x40020800

08001184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001184:	b500      	push	{lr}
 8001186:	b083      	sub	sp, #12
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001188:	2000      	movs	r0, #0
 800118a:	9000      	str	r0, [sp, #0]
 800118c:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <SystemClock_Config+0x40>)
 800118e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001190:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001194:	641a      	str	r2, [r3, #64]	; 0x40
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a0:	9001      	str	r0, [sp, #4]
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <SystemClock_Config+0x44>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011b2:	9301      	str	r3, [sp, #4]
 80011b4:	9b01      	ldr	r3, [sp, #4]

//  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
//  {
//    Error_Handler();
//  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80011b6:	4602      	mov	r2, r0
 80011b8:	4601      	mov	r1, r0
 80011ba:	f7ff fb45 	bl	8000848 <HAL_RCC_MCOConfig>
}
 80011be:	b003      	add	sp, #12
 80011c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40007000 	.word	0x40007000

080011cc <main>:
{
 80011cc:	b500      	push	{lr}
 80011ce:	b083      	sub	sp, #12
	HAL_Init();
 80011d0:	f7ff f9aa 	bl	8000528 <HAL_Init>
	SystemClock_Config();
 80011d4:	f7ff ffd6 	bl	8001184 <SystemClock_Config>
	CommsN64Console_Init();
 80011d8:	f7ff fc6a 	bl	8000ab0 <CommsN64Console_Init>
	Main_Init();
 80011dc:	f7ff ff9a 	bl	8001114 <Main_Init>
	CommsN64Console_SetPullup(N64_PULLUP);
 80011e0:	2001      	movs	r0, #1
 80011e2:	f7ff fcbf 	bl	8000b64 <CommsN64Console_SetPullup>
	HAL_Delay(100);
 80011e6:	2064      	movs	r0, #100	; 0x64
 80011e8:	f7ff f9ca 	bl	8000580 <HAL_Delay>
    	volatile uint32_t counter = 200;
 80011ec:	24c8      	movs	r4, #200	; 0xc8
 80011ee:	9401      	str	r4, [sp, #4]
    	while(counter--);
 80011f0:	9b01      	ldr	r3, [sp, #4]
 80011f2:	1e5a      	subs	r2, r3, #1
 80011f4:	9201      	str	r2, [sp, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1fa      	bne.n	80011f0 <main+0x24>
    	CommsN64Console_GetContollerInputs();
 80011fa:	f7ff fea1 	bl	8000f40 <CommsN64Console_GetContollerInputs>
    	CommsN64Console_ParseContollerInputs();
 80011fe:	f7ff fcc9 	bl	8000b94 <CommsN64Console_ParseContollerInputs>
    {
 8001202:	e7f4      	b.n	80011ee <main+0x22>

08001204 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001204:	480d      	ldr	r0, [pc, #52]	; (800123c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001206:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001208:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <LoopForever+0x6>)
  ldr r1, =_edata
 800120e:	490d      	ldr	r1, [pc, #52]	; (8001244 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001210:	4a0d      	ldr	r2, [pc, #52]	; (8001248 <LoopForever+0xe>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001214:	e002      	b.n	800121c <LoopCopyDataInit>

08001216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121a:	3304      	adds	r3, #4

0800121c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800121c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001220:	d3f9      	bcc.n	8001216 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001222:	4a0a      	ldr	r2, [pc, #40]	; (800124c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001224:	4c0a      	ldr	r4, [pc, #40]	; (8001250 <LoopForever+0x16>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001228:	e001      	b.n	800122e <LoopFillZerobss>

0800122a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800122c:	3204      	adds	r2, #4

0800122e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001230:	d3fb      	bcc.n	800122a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001232:	f000 f811 	bl	8001258 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001236:	f7ff ffc9 	bl	80011cc <main>

0800123a <LoopForever>:

LoopForever:
    b LoopForever
 800123a:	e7fe      	b.n	800123a <LoopForever>
  ldr   r0, =_estack
 800123c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001244:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001248:	080012d0 	.word	0x080012d0
  ldr r2, =_sbss
 800124c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001250:	20000084 	.word	0x20000084

08001254 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001254:	e7fe      	b.n	8001254 <ADC_IRQHandler>
	...

08001258 <__libc_init_array>:
 8001258:	b570      	push	{r4, r5, r6, lr}
 800125a:	4e0d      	ldr	r6, [pc, #52]	; (8001290 <__libc_init_array+0x38>)
 800125c:	4c0d      	ldr	r4, [pc, #52]	; (8001294 <__libc_init_array+0x3c>)
 800125e:	1ba4      	subs	r4, r4, r6
 8001260:	10a4      	asrs	r4, r4, #2
 8001262:	2500      	movs	r5, #0
 8001264:	42a5      	cmp	r5, r4
 8001266:	d109      	bne.n	800127c <__libc_init_array+0x24>
 8001268:	4e0b      	ldr	r6, [pc, #44]	; (8001298 <__libc_init_array+0x40>)
 800126a:	4c0c      	ldr	r4, [pc, #48]	; (800129c <__libc_init_array+0x44>)
 800126c:	f000 f818 	bl	80012a0 <_init>
 8001270:	1ba4      	subs	r4, r4, r6
 8001272:	10a4      	asrs	r4, r4, #2
 8001274:	2500      	movs	r5, #0
 8001276:	42a5      	cmp	r5, r4
 8001278:	d105      	bne.n	8001286 <__libc_init_array+0x2e>
 800127a:	bd70      	pop	{r4, r5, r6, pc}
 800127c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001280:	4798      	blx	r3
 8001282:	3501      	adds	r5, #1
 8001284:	e7ee      	b.n	8001264 <__libc_init_array+0xc>
 8001286:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800128a:	4798      	blx	r3
 800128c:	3501      	adds	r5, #1
 800128e:	e7f2      	b.n	8001276 <__libc_init_array+0x1e>
 8001290:	080012c8 	.word	0x080012c8
 8001294:	080012c8 	.word	0x080012c8
 8001298:	080012c8 	.word	0x080012c8
 800129c:	080012cc 	.word	0x080012cc

080012a0 <_init>:
 80012a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012a2:	bf00      	nop
 80012a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012a6:	bc08      	pop	{r3}
 80012a8:	469e      	mov	lr, r3
 80012aa:	4770      	bx	lr

080012ac <_fini>:
 80012ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ae:	bf00      	nop
 80012b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012b2:	bc08      	pop	{r3}
 80012b4:	469e      	mov	lr, r3
 80012b6:	4770      	bx	lr
